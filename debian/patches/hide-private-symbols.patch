Description: Hide private symbols from library ABI
 Any function undeclared in exported headers or unreferenced by the GObject
 Introspection and by any installed binary have their ELF visibility
 changed to hidden.
Author: Nicolas Bourdaud <nicolas.bourdaud@gmail.com>
Origin: vendor
Forwarded: https://github.com/linuxmint/muffin/pull/38
Applied-Upstream: no
Last-Update: 2012-07-28

--- a/configure.in
+++ b/configure.in
@@ -40,6 +40,7 @@
 
 IT_PROG_INTLTOOL([0.34.90])
 AC_PROG_CC
+AM_PROG_CC_C_O
 AC_ISC_POSIX
 AC_HEADER_STDC
 AC_LIBTOOL_WIN32_DLL
@@ -61,6 +62,16 @@
 ## byte order
 AC_C_BIGENDIAN
 
+#### Usability of visibility attributes
+gl_VISIBILITY
+AC_DEFINE(LOCAL_SYMBOL, [], [attribute of the non-exported symbols])
+AC_DEFINE(API_EXPORTED, [], [attribute of the symbols exported in the API])
+if test $HAVE_VISIBILITY = 1; then
+     AC_DEFINE(LOCAL_SYMBOL, [__attribute__ ((visibility ("hidden")))])
+     AC_DEFINE(API_EXPORTED, [__attribute__ ((visibility ("default")))])
+fi
+
+
 CANBERRA_GTK=libcanberra-gtk3
 CANBERRA_GTK_VERSION=0.26
 
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -235,15 +235,21 @@
 
 muffin_theme_viewer_LDADD= $(MUFFIN_LIBS) libmuffin.la
 
-testboxes_SOURCES = core/testboxes.c
+testboxes_SOURCES = core/testboxes.c core/boxes.c core/util.c
 testgradient_SOURCES = ui/testgradient.c
-testasyncgetprop_SOURCES = core/testasyncgetprop.c
+testasyncgetprop_SOURCES = core/testasyncgetprop.c core/async-getprop.c
+
+# NO-OP: work around the fact that source code tested by the programs are
+# compiled for library
+testasyncgetprop_CFLAGS = $(AM_CFLAGS) 
+testboxes_CFLAGS = $(AM_CFLAGS) 
 
 noinst_PROGRAMS=testboxes testgradient testasyncgetprop
 
-testboxes_LDADD = $(MUFFIN_LIBS) libmuffin.la
+testboxes_LDADD = $(MUFFIN_LIBS)
 testgradient_LDADD = $(MUFFIN_LIBS) libmuffin.la
-testasyncgetprop_LDADD = $(MUFFIN_LIBS) libmuffin.la
+testasyncgetprop_LDADD = $(MUFFIN_LIBS)
+
 
 @INTLTOOL_DESKTOP_RULE@
 
--- a/src/compositor/cogl-utils.c
+++ b/src/compositor/cogl-utils.c
@@ -21,6 +21,9 @@
  * 02110-1335, USA.
  */
 
+#if HAVE_CONFIG_H
+#include <config.h>
+#endif
 #include "cogl-utils.h"
 
 /**
@@ -39,7 +42,7 @@
  *
  * Return value: (transfer full): a newly created Cogl texture
  */
-CoglHandle
+LOCAL_SYMBOL CoglHandle
 meta_create_color_texture_4ub (guint8           red,
                                guint8           green,
                                guint8           blue,
@@ -79,7 +82,7 @@
  *
  * Return value: (transfer full): a newly created Cogl material
  */
-CoglHandle
+LOCAL_SYMBOL CoglHandle
 meta_create_texture_material (CoglHandle src_texture)
 {
   static CoglHandle texture_material_template = COGL_INVALID_HANDLE;
--- a/src/compositor/compositor.c
+++ b/src/compositor/compositor.c
@@ -56,7 +56,7 @@
 
 }
 
-void
+LOCAL_SYMBOL void
 meta_switch_workspace_completed (MetaScreen *screen)
 {
   MetaCompScreen *info = meta_screen_get_compositor_data (screen);
@@ -351,7 +351,7 @@
   meta_set_stage_input_region (screen, region);
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_begin_modal_for_plugin (MetaScreen       *screen,
                              MetaPlugin       *plugin,
                              Window            grab_window,
@@ -421,7 +421,7 @@
   return FALSE;
 }
 
-void
+LOCAL_SYMBOL void
 meta_end_modal_for_plugin (MetaScreen     *screen,
                            MetaPlugin     *plugin,
                            guint32         timestamp)
@@ -447,7 +447,7 @@
 /* This is used when reloading plugins to make sure we don't have
  * a left-over modal grab for this screen.
  */
-void
+LOCAL_SYMBOL void
 meta_check_end_modal (MetaScreen *screen)
 {
   MetaDisplay    *display    = meta_screen_get_display (screen);
--- a/src/compositor/meta-background-actor.c
+++ b/src/compositor/meta-background-actor.c
@@ -502,7 +502,7 @@
  * circumstances), so this should only be called when we actually receive
  * a PropertyNotify event for the property.
  */
-void
+LOCAL_SYMBOL void
 meta_background_actor_update (MetaScreen *screen)
 {
   MetaScreenBackground *background;
@@ -578,7 +578,7 @@
  * Sets the area of the background that is unobscured by overlapping windows.
  * This is used to optimize and only paint the visible portions.
  */
-void
+LOCAL_SYMBOL void
 meta_background_actor_set_visible_region (MetaBackgroundActor *self,
                                           cairo_region_t      *visible_region)
 {
@@ -614,7 +614,7 @@
  *
  * Called by the compositor when the size of the #MetaScreen changes
  */
-void
+LOCAL_SYMBOL void
 meta_background_actor_screen_size_changed (MetaScreen *screen)
 {
   MetaScreenBackground *background = meta_screen_background_get (screen);
--- a/src/compositor/meta-module.c
+++ b/src/compositor/meta-module.c
@@ -21,6 +21,10 @@
  * 02110-1335, USA.
  */
 
+#if HAVE_CONFIG_H
+#include <config.h>
+#endif
+
 #include <meta/meta-plugin.h>
 #include "meta-module.h"
 
@@ -198,7 +202,7 @@
 
 }
 
-GType
+LOCAL_SYMBOL GType
 meta_module_get_plugin_type (MetaModule *module)
 {
   MetaModulePrivate *priv = META_MODULE (module)->priv;
--- a/src/compositor/meta-plugin-manager.c
+++ b/src/compositor/meta-plugin-manager.c
@@ -91,7 +91,7 @@
 /*
  * Registers the given plugin type
  */
-void
+LOCAL_SYMBOL void
 meta_plugin_manager_register (MetaPluginManager *plugin_mgr,
                               GType              plugin_type)
 {
@@ -103,7 +103,7 @@
   plugin_mgr->plugins = g_list_prepend (plugin_mgr->plugins, plugin);
 }
 
-void
+LOCAL_SYMBOL void
 meta_plugin_manager_initialize (MetaPluginManager *plugin_mgr)
 {
   GList *iter;
@@ -155,7 +155,7 @@
   return default_plugin_manager;
 }
 
-MetaPluginManager *
+LOCAL_SYMBOL MetaPluginManager *
 meta_plugin_manager_get (MetaScreen *screen)
 {
   MetaPluginManager *plugin_mgr;
@@ -241,7 +241,7 @@
  * manager completed() callback, and the compositor must ensure that any
  * appropriate post-effect cleanup is carried out.
  */
-gboolean
+LOCAL_SYMBOL gboolean
 meta_plugin_manager_event_simple (MetaPluginManager *plugin_mgr,
                                   MetaWindowActor   *actor,
                                   unsigned long      event)
@@ -314,7 +314,7 @@
  * manager completed() callback, and the compositor must ensure that any
  * appropriate post-effect cleanup is carried out.
  */
-gboolean
+LOCAL_SYMBOL gboolean
 meta_plugin_manager_event_maximize (MetaPluginManager *plugin_mgr,
                                     MetaWindowActor   *actor,
                                     unsigned long      event,
@@ -387,7 +387,7 @@
  * manager completed() callback, and the compositor must ensure that any
  * appropriate post-effect cleanup is carried out.
  */
-gboolean
+LOCAL_SYMBOL gboolean
 meta_plugin_manager_switch_workspace (MetaPluginManager   *plugin_mgr,
                                       gint                 from,
                                       gint                 to,
@@ -432,7 +432,7 @@
  * manager completed() callback, and the compositor must ensure that any
  * appropriate post-effect cleanup is carried out.
  */
-gboolean
+LOCAL_SYMBOL gboolean
 meta_plugin_manager_xevent_filter (MetaPluginManager *plugin_mgr,
                                    XEvent            *xev)
 {
--- a/src/compositor/meta-shadow-factory.c
+++ b/src/compositor/meta-shadow-factory.c
@@ -119,7 +119,7 @@
 
 /* The first element in this array also defines the default parameters
  * for newly created classes */
-MetaShadowClassInfo default_shadow_classes[] = {
+static MetaShadowClassInfo default_shadow_classes[] = {
   { "normal",       { 6, -1, 0, 3, 255 }, { 3, -1, 0, 3, 128 } },
   { "dialog",       { 6, -1, 0, 3, 255 }, { 3, -1, 0, 3, 128 } },
   { "modal_dialog", { 6, -1, 0, 1, 255 }, { 3, -1, 0, 3, 128 } },
@@ -154,7 +154,7 @@
           meta_window_shape_equal (key_a->shape, key_b->shape));
 }
 
-MetaShadow *
+LOCAL_SYMBOL MetaShadow *
 meta_shadow_ref (MetaShadow *shadow)
 {
   shadow->ref_count++;
@@ -162,7 +162,7 @@
   return shadow;
 }
 
-void
+LOCAL_SYMBOL void
 meta_shadow_unref (MetaShadow *shadow)
 {
   shadow->ref_count--;
@@ -199,7 +199,7 @@
  * different sizes with the same extracted #MetaWindowShape the
  * size needs to be passed in here.)
  */
-void
+LOCAL_SYMBOL void
 meta_shadow_paint (MetaShadow     *shadow,
                    int             window_x,
                    int             window_y,
@@ -362,7 +362,7 @@
  * Computes the bounds of the pixels that will be affected by
  * meta_shadow_paint()
  */
-void
+LOCAL_SYMBOL void
 meta_shadow_get_bounds  (MetaShadow            *shadow,
                          int                    window_x,
                          int                    window_y,
@@ -446,7 +446,7 @@
                   G_TYPE_NONE, 0);
 }
 
-MetaShadowFactory *
+LOCAL_SYMBOL MetaShadowFactory *
 meta_shadow_factory_new (void)
 {
   return g_object_new (META_TYPE_SHADOW_FACTORY, NULL);
@@ -853,7 +853,7 @@
  * Return value: (transfer full): a newly referenced #MetaShadow; unref with
  *  meta_shadow_unref()
  */
-MetaShadow *
+LOCAL_SYMBOL MetaShadow *
 meta_shadow_factory_get_shadow (MetaShadowFactory *factory,
                                 MetaWindowShape   *shape,
                                 int                width,
--- a/src/compositor/meta-texture-rectangle.c
+++ b/src/compositor/meta-texture-rectangle.c
@@ -31,7 +31,7 @@
 #include <clutter/clutter.h>
 #include "meta-texture-rectangle.h"
 
-CoglTexture *
+LOCAL_SYMBOL CoglTexture *
 meta_texture_rectangle_new (unsigned int width,
                             unsigned int height,
                             CoglPixelFormat format,
@@ -84,7 +84,7 @@
  *
  * http://git.gnome.org/browse/cogl/commit/?h=8012eee31
  */
-gboolean
+LOCAL_SYMBOL gboolean
 meta_texture_rectangle_check (CoglTexture *texture)
 {
   gboolean result = FALSE;
--- a/src/compositor/meta-texture-tower.c
+++ b/src/compositor/meta-texture-tower.c
@@ -22,6 +22,10 @@
  * 02110-1335, USA.
  */
 
+#if HAVE_CONFIG_H
+#include <config.h>
+#endif
+
 #include <math.h>
 #include <string.h>
 
@@ -72,7 +76,7 @@
  *
  * Return value: the new texture tower. Free with meta_texture_tower_free()
  */
-MetaTextureTower *
+LOCAL_SYMBOL MetaTextureTower *
 meta_texture_tower_new (void)
 {
   MetaTextureTower *tower;
@@ -88,7 +92,7 @@
  *
  * Frees a texture tower created with meta_texture_tower_new().
  */
-void
+LOCAL_SYMBOL void
 meta_texture_tower_free (MetaTextureTower *tower)
 {
   g_return_if_fail (tower != NULL);
@@ -108,7 +112,7 @@
  * will be used as level 0 of the tower and will be referenced until
  * unset or until the tower is freed.
  */
-void
+LOCAL_SYMBOL void
 meta_texture_tower_set_base_texture (MetaTextureTower *tower,
                                      CoglHandle        texture)
 {
@@ -173,7 +177,7 @@
  * time a scaled down version of the base texture is retrieved,
  * the appropriate area of the scaled down texture will be updated.
  */
-void
+LOCAL_SYMBOL void
 meta_texture_tower_update_area (MetaTextureTower *tower,
                                 int               x,
                                 int               y,
@@ -577,7 +581,7 @@
  * Return value: the COGL texture handle to use for painting, or
  *  %COGL_INVALID_HANDLE if no base texture has yet been set.
  */
-CoglHandle
+LOCAL_SYMBOL CoglHandle
 meta_texture_tower_get_paint_texture (MetaTextureTower *tower)
 {
   int texture_width, texture_height;
--- a/src/compositor/meta-window-actor.c
+++ b/src/compositor/meta-window-actor.c
@@ -575,7 +575,7 @@
                                   params);
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_actor_get_shape_bounds (MetaWindowActor       *self,
                                     cairo_rectangle_int_t *bounds)
 {
@@ -967,7 +967,7 @@
     meta_window_actor_damage_all (self);
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_window_actor_effect_in_progress (MetaWindowActor *self)
 {
   return (self->priv->minimize_in_progress ||
@@ -1086,7 +1086,7 @@
     clutter_actor_queue_redraw (priv->actor);
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_actor_effect_completed (MetaWindowActor *self,
                                     gulong           event)
 {
@@ -1188,7 +1188,7 @@
   meta_window_actor_queue_create_pixmap (self);
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_window_actor_should_unredirect (MetaWindowActor *self)
 {
   MetaWindow *metaWindow = meta_window_actor_get_meta_window (self);
@@ -1224,7 +1224,7 @@
   return FALSE;
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_actor_set_redirected (MetaWindowActor *self, gboolean state)
 {
   MetaWindow *metaWindow = meta_window_actor_get_meta_window (self);
@@ -1250,7 +1250,7 @@
     }
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_actor_destroy (MetaWindowActor *self)
 {
   MetaWindow	      *window;
@@ -1300,7 +1300,7 @@
     clutter_actor_destroy (CLUTTER_ACTOR (self));
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_actor_sync_actor_position (MetaWindowActor *self)
 {
   MetaWindowActorPrivate *priv = self->priv;
@@ -1371,7 +1371,7 @@
     }
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_actor_hide (MetaWindowActor *self,
                         MetaCompEffect   effect)
 {
@@ -1414,7 +1414,7 @@
     clutter_actor_hide (CLUTTER_ACTOR (self));
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_actor_maximize (MetaWindowActor    *self,
                             MetaRectangle      *old_rect,
                             MetaRectangle      *new_rect)
@@ -1443,7 +1443,7 @@
     }
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_actor_unmaximize (MetaWindowActor   *self,
                               MetaRectangle     *old_rect,
                               MetaRectangle     *new_rect)
@@ -1471,7 +1471,7 @@
     }
 }
 
-MetaWindowActor *
+LOCAL_SYMBOL MetaWindowActor *
 meta_window_actor_new (MetaWindow *window)
 {
   MetaScreen	 	 *screen = meta_window_get_screen (window);
@@ -1543,7 +1543,7 @@
   return self;
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_actor_mapped (MetaWindowActor *self)
 {
   MetaWindowActorPrivate *priv = self->priv;
@@ -1555,7 +1555,7 @@
   meta_window_actor_queue_create_pixmap (self);
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_actor_unmapped (MetaWindowActor *self)
 {
   MetaWindowActorPrivate *priv = self->priv;
@@ -1693,7 +1693,7 @@
  * Return value: (transfer none): the area obscured by the window,
  *  %NULL is the same as an empty region.
  */
-cairo_region_t *
+LOCAL_SYMBOL cairo_region_t *
 meta_window_actor_get_obscured_region (MetaWindowActor *self)
 {
   MetaWindowActorPrivate *priv = self->priv;
@@ -1740,7 +1740,7 @@
  * drawn. Regions not in @visible_region are completely obscured.
  * This will be set before painting then unset afterwards.
  */
-void
+LOCAL_SYMBOL void
 meta_window_actor_set_visible_region (MetaWindowActor *self,
                                       cairo_region_t  *visible_region)
 {
@@ -1762,7 +1762,7 @@
  * shadow hid by the window itself. This will be set before painting
  * then unset afterwards.
  */
-void
+LOCAL_SYMBOL void
 meta_window_actor_set_visible_region_beneath (MetaWindowActor *self,
                                               cairo_region_t  *beneath_region)
 {
@@ -1789,7 +1789,7 @@
  * Unsets the regions set by meta_window_actor_reset_visible_region() and
  * meta_window_actor_reset_visible_region_beneath()
  */
-void
+LOCAL_SYMBOL void
 meta_window_actor_reset_visible_regions (MetaWindowActor *self)
 {
   MetaWindowActorPrivate *priv = self->priv;
@@ -1968,7 +1968,7 @@
   return self->priv->freeze_count ? TRUE : FALSE;
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_actor_process_damage (MetaWindowActor    *self,
                                   XDamageNotifyEvent *event)
 {
@@ -2010,7 +2010,7 @@
                                    event->area.height);
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_actor_sync_visibility (MetaWindowActor *self)
 {
   MetaWindowActorPrivate *priv = self->priv;
@@ -2234,7 +2234,7 @@
   meta_window_actor_invalidate_shadow (self);
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_actor_update_shape (MetaWindowActor *self)
 {
   MetaWindowActorPrivate *priv = self->priv;
@@ -2249,7 +2249,7 @@
   clutter_actor_queue_redraw (priv->actor);
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_actor_pre_paint (MetaWindowActor *self)
 {
   MetaWindowActorPrivate *priv = self->priv;
@@ -2304,7 +2304,7 @@
   check_needs_shadow (self);
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_actor_invalidate_shadow (MetaWindowActor *self)
 {
   MetaWindowActorPrivate *priv = self->priv;
@@ -2314,7 +2314,7 @@
   clutter_actor_queue_redraw (CLUTTER_ACTOR (self));
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_actor_update_opacity (MetaWindowActor *self)
 {
   MetaWindowActorPrivate *priv = self->priv;
--- a/src/compositor/meta-window-group.c
+++ b/src/compositor/meta-window-group.c
@@ -235,7 +235,7 @@
 {
 }
 
-ClutterActor *
+LOCAL_SYMBOL ClutterActor *
 meta_window_group_new (MetaScreen *screen)
 {
   MetaWindowGroup *window_group;
--- a/src/compositor/meta-window-shape.c
+++ b/src/compositor/meta-window-shape.c
@@ -21,6 +21,10 @@
  * Foundation, Inc., 51 Franklin Street - Suite 500, Boston, MA
  * 02110-1335, USA.
  */
+#if HAVE_CONFIG_H
+#include <config.h>
+#endif
+
 #include <string.h>
 
 #include "meta-window-shape.h"
@@ -36,7 +40,7 @@
   guint hash;
 };
 
-MetaWindowShape *
+LOCAL_SYMBOL MetaWindowShape *
 meta_window_shape_new (cairo_region_t *region)
 {
   MetaWindowShape *shape;
@@ -158,7 +162,7 @@
   return shape;
 }
 
-MetaWindowShape *
+LOCAL_SYMBOL MetaWindowShape *
 meta_window_shape_ref (MetaWindowShape *shape)
 {
   shape->ref_count++;
@@ -166,7 +170,7 @@
   return shape;
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_shape_unref (MetaWindowShape *shape)
 {
   shape->ref_count--;
@@ -177,13 +181,13 @@
     }
 }
 
-guint
+LOCAL_SYMBOL guint
 meta_window_shape_hash (MetaWindowShape *shape)
 {
   return shape->hash;
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_window_shape_equal (MetaWindowShape *shape_a,
                          MetaWindowShape *shape_b)
 {
@@ -194,7 +198,7 @@
                  sizeof (cairo_rectangle_int_t) * shape_a->n_rectangles) == 0;
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_shape_get_borders (MetaWindowShape *shape,
                                int             *border_top,
                                int             *border_right,
@@ -222,7 +226,7 @@
  *
  * Return value: a newly created region
  */
-cairo_region_t *
+LOCAL_SYMBOL cairo_region_t *
 meta_window_shape_to_region (MetaWindowShape *shape,
                              int              center_width,
                              int              center_height)
--- a/src/compositor/region-utils.c
+++ b/src/compositor/region-utils.c
@@ -20,6 +20,10 @@
  * 02110-1335, USA.
  */
 
+#if HAVE_CONFIG_H
+#include <config.h>
+#endif
+
 #include "region-utils.h"
 
 #include <math.h>
@@ -144,7 +148,7 @@
 
 /* MetaRegionIterator */
 
-void
+LOCAL_SYMBOL void
 meta_region_iterator_init (MetaRegionIterator *iter,
                            cairo_region_t     *region)
 {
@@ -167,13 +171,13 @@
     }
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_region_iterator_at_end (MetaRegionIterator *iter)
 {
   return iter->i >= iter->n_rectangles;
 }
 
-void
+LOCAL_SYMBOL void
 meta_region_iterator_next (MetaRegionIterator *iter)
 {
   iter->i++;
@@ -312,7 +316,7 @@
  *
  * Return value: a new region which is the border of the given region
  */
-cairo_region_t *
+LOCAL_SYMBOL cairo_region_t *
 meta_make_border_region (cairo_region_t *region,
                          int             x_amount,
                          int             y_amount,
--- a/src/core/above-tab-keycode.c
+++ b/src/core/above-tab-keycode.c
@@ -230,7 +230,7 @@
 }
 #endif /* HAVE_XKB */
 
-guint
+LOCAL_SYMBOL guint
 meta_display_get_above_tab_keycode (MetaDisplay *display)
 {
   if (display->above_tab_keycode == 0) /* not yet computed */
--- a/src/core/async-getprop.c
+++ b/src/core/async-getprop.c
@@ -27,6 +27,9 @@
  * used in advertising or otherwise to promote the sale, use or other dealings
  * in this Software without prior written authorization from The Open Group.
  */
+#if HAVE_CONFIG_H
+#include <config.h>
+#endif
 
 #include <assert.h>
 
@@ -513,7 +516,7 @@
     }
 }
 
-AgGetPropertyTask*
+LOCAL_SYMBOL AgGetPropertyTask*
 ag_task_create (Display *dpy,
                 Window   window,
                 Atom     property,
@@ -580,7 +583,7 @@
   XFree (task);
 }
 
-Status
+LOCAL_SYMBOL Status
 ag_task_get_reply_and_free (AgGetPropertyTask  *task,
                             Atom               *actual_type,
                             int                *actual_format,
@@ -624,31 +627,31 @@
   return Success;
 }
 
-Bool
+LOCAL_SYMBOL Bool
 ag_task_have_reply (AgGetPropertyTask *task)
 {
   return task->have_reply;
 }
 
-Atom
+LOCAL_SYMBOL Atom
 ag_task_get_property (AgGetPropertyTask *task)
 {
   return task->property;
 }
 
-Window
+LOCAL_SYMBOL Window
 ag_task_get_window (AgGetPropertyTask *task)
 {
   return task->window;
 }
 
-Display*
+LOCAL_SYMBOL Display*
 ag_task_get_display (AgGetPropertyTask *task)
 {
   return task->dd->display;
 }
 
-AgGetPropertyTask*
+LOCAL_SYMBOL AgGetPropertyTask*
 ag_get_next_completed_task (Display *display)
 {
   AgPerDisplayData *dd;
@@ -667,13 +670,13 @@
   return (AgGetPropertyTask*) dd->completed_tasks;
 }
 
-void*
+LOCAL_SYMBOL void*
 ag_Xmalloc (unsigned long bytes)
 {
   return (void*) Xmalloc (bytes);
 }
 
-void*
+LOCAL_SYMBOL void*
 ag_Xmalloc0 (unsigned long bytes)
 {
   return (void*) Xcalloc (bytes, 1);
--- a/src/core/bell.c
+++ b/src/core/bell.c
@@ -287,7 +287,7 @@
     }
 }
 
-void
+LOCAL_SYMBOL void
 meta_bell_notify (MetaDisplay *display, 
 		  XkbAnyEvent *xkb_ev)
 {
@@ -339,7 +339,7 @@
 }
 #endif /* HAVE_XKB */
 
-void
+LOCAL_SYMBOL void
 meta_bell_set_audible (MetaDisplay *display, gboolean audible)
 {
 #ifdef HAVE_XKB
@@ -358,7 +358,7 @@
 #endif /* HAVE_XKB */
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_bell_init (MetaDisplay *display)
 {
 #ifdef HAVE_XKB
@@ -395,7 +395,7 @@
   return FALSE;
 }
 
-void
+LOCAL_SYMBOL void
 meta_bell_shutdown (MetaDisplay *display)
 {
 #ifdef HAVE_XKB
@@ -415,7 +415,7 @@
  *
  * \param frame  The frame which is being destroyed
  */
-void
+LOCAL_SYMBOL void
 meta_bell_notify_frame_destroy (MetaFrame *frame)
 {
   if (frame->is_flashing) 
--- a/src/core/boxes.c
+++ b/src/core/boxes.c
@@ -25,6 +25,9 @@
  * Foundation, Inc., 51 Franklin Street - Suite 500, Boston, MA
  * 02110-1335, USA.
  */
+#if HAVE_CONFIG_H
+#include <config.h>
+#endif
 
 #include "boxes-private.h"
 #include <meta/util.h>
@@ -59,7 +62,7 @@
   return type_id;
 }
 
-char*
+LOCAL_SYMBOL char*
 meta_rectangle_to_string (const MetaRectangle *rect,
                           char                *output)
 {
@@ -73,7 +76,7 @@
   return output;
 }
 
-char*
+LOCAL_SYMBOL char*
 meta_rectangle_region_to_string (GList      *region,
                                  const char *separator_string,
                                  char       *output)
@@ -105,7 +108,7 @@
   return output;
 }
 
-char*
+LOCAL_SYMBOL char*
 meta_rectangle_edge_to_string (const MetaEdge *edge,
                                char           *output)
 {
@@ -123,7 +126,7 @@
   return output;
 }
 
-char*
+LOCAL_SYMBOL char*
 meta_rectangle_edge_list_to_string (GList      *edge_list,
                                     const char *separator_string,
                                     char       *output)
@@ -325,7 +328,7 @@
     inner_rect->y + inner_rect->height <= outer_rect->y + outer_rect->height;
 }
 
-void
+LOCAL_SYMBOL void
 meta_rectangle_resize_with_gravity (const MetaRectangle *old_rect,
                                     MetaRectangle       *rect,
                                     int                  gravity,
@@ -564,7 +567,7 @@
  *
  * Returns: (transfer full) (element-type Meta.Rectangle): Minimal spanning set
  */
-GList*
+LOCAL_SYMBOL GList*
 meta_rectangle_get_minimal_spanning_set_for_region (
   const MetaRectangle *basic_rect,
   const GSList  *all_struts)
@@ -699,7 +702,7 @@
  * meta_rectangle_expand_region: (skip)
  *
  */
-GList*
+LOCAL_SYMBOL GList*
 meta_rectangle_expand_region (GList     *region,
                               const int  left_expand,
                               const int  right_expand,
@@ -719,7 +722,7 @@
  * meta_rectangle_expand_region_conditionally: (skip)
  *
  */
-GList*
+LOCAL_SYMBOL GList*
 meta_rectangle_expand_region_conditionally (GList     *region,
                                             const int  left_expand,
                                             const int  right_expand,
@@ -748,7 +751,7 @@
   return region;
 }
 
-void
+LOCAL_SYMBOL void
 meta_rectangle_expand_to_avoiding_struts (MetaRectangle       *rect,
                                           const MetaRectangle *expand_to,
                                           const MetaDirection  direction,
@@ -818,7 +821,7 @@
     } /* end loop over struts */
 } /* end meta_rectangle_expand_to_avoiding_struts */
 
-void
+LOCAL_SYMBOL void
 meta_rectangle_free_list_and_elements (GList *filled_list)
 {
   g_list_foreach (filled_list, 
@@ -827,7 +830,7 @@
   g_list_free (filled_list);
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_rectangle_could_fit_in_region (const GList         *spanning_rects,
                                     const MetaRectangle *rect)
 {
@@ -845,7 +848,7 @@
   return could_fit;
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_rectangle_contained_in_region (const GList         *spanning_rects,
                                     const MetaRectangle *rect)
 {
@@ -863,7 +866,7 @@
   return contained;
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_rectangle_overlaps_with_region (const GList         *spanning_rects,
                                      const MetaRectangle *rect)
 {
@@ -882,7 +885,7 @@
 }
 
 
-void
+LOCAL_SYMBOL void
 meta_rectangle_clamp_to_fit_into_region (const GList         *spanning_rects,
                                          FixedDirections      fixed_directions,
                                          MetaRectangle       *rect,
@@ -952,7 +955,7 @@
     }
 }
 
-void
+LOCAL_SYMBOL void
 meta_rectangle_clip_to_region (const GList         *spanning_rects,
                                FixedDirections      fixed_directions,
                                MetaRectangle       *rect)
@@ -1029,7 +1032,7 @@
     }
 }
 
-void
+LOCAL_SYMBOL void
 meta_rectangle_shove_into_region (const GList         *spanning_rects,
                                   FixedDirections      fixed_directions,
                                   MetaRectangle       *rect)
@@ -1129,7 +1132,7 @@
     }
 }
 
-void
+LOCAL_SYMBOL void
 meta_rectangle_find_linepoint_closest_to_point (double x1,
                                                 double y1,
                                                 double x2,
@@ -1192,7 +1195,7 @@
 /*                                                                         */
 /***************************************************************************/
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_rectangle_edge_aligns (const MetaRectangle *rect, const MetaEdge *edge)
 {
   /* The reason for the usage of <= below instead of < is because we are
@@ -1378,7 +1381,7 @@
   return strut_rects;
 }
 
-gint
+LOCAL_SYMBOL gint
 meta_rectangle_edge_cmp_ignore_type (gconstpointer a, gconstpointer b)
 {
   const MetaEdge *a_edge_rect = (gconstpointer) a;
@@ -1422,7 +1425,7 @@
 }
 
 /* To make things easily testable, provide a nice way of sorting edges */
-gint
+LOCAL_SYMBOL gint
 meta_rectangle_edge_cmp (gconstpointer a, gconstpointer b)
 {
   const MetaEdge *a_edge_rect = (gconstpointer) a;
@@ -1702,7 +1705,7 @@
  * This function removes intersections of edges with the rectangles from the
  * list of edges.
  */
-GList*
+LOCAL_SYMBOL GList*
 meta_rectangle_remove_intersections_with_boxes_from_edges (
   GList        *edges,
   const GSList *rectangles)
@@ -1770,7 +1773,7 @@
  *
  * This function is trying to find all the edges of an onscreen region.
  */
-GList*
+LOCAL_SYMBOL GList*
 meta_rectangle_find_onscreen_edges (const MetaRectangle *basic_rect,
                                     const GSList        *all_struts)
 {
@@ -1856,7 +1859,7 @@
  * meta_rectangle_find_nonintersected_monitor_edges: (skip)
  *
  */
-GList*
+LOCAL_SYMBOL GList*
 meta_rectangle_find_nonintersected_monitor_edges (
                                     const GList         *monitor_rects,
                                     const GSList        *all_struts)
--- a/src/core/constraints.c
+++ b/src/core/constraints.c
@@ -278,7 +278,7 @@
   return TRUE;
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_constrain (MetaWindow          *window,
                        MetaFrameBorders    *orig_borders,
                        MetaMoveResizeFlags  flags,
--- a/src/core/core.c
+++ b/src/core/core.c
@@ -60,7 +60,7 @@
   return window;
 }
 
-void
+LOCAL_SYMBOL void
 meta_core_get (Display *xdisplay,
     Window xwindow,
     ...)
@@ -163,7 +163,7 @@
   va_end (args);
 }
 
-void
+LOCAL_SYMBOL void
 meta_core_queue_frame_resize (Display *xdisplay,
                               Window   frame_xwindow)
 {
@@ -172,7 +172,7 @@
   meta_window_queue (window, META_QUEUE_MOVE_RESIZE);
 }
 
-void
+LOCAL_SYMBOL void
 meta_core_user_move (Display *xdisplay,
                      Window   frame_xwindow,
                      int      x,
@@ -183,7 +183,7 @@
   meta_window_move (window, TRUE, x, y);
 }
 
-void
+LOCAL_SYMBOL void
 meta_core_user_resize  (Display *xdisplay,
                         Window   frame_xwindow,
                         int      gravity,
@@ -195,7 +195,7 @@
   meta_window_resize_with_gravity (window, TRUE, width, height, gravity);
 }
 
-void
+LOCAL_SYMBOL void
 meta_core_user_raise (Display *xdisplay,
                       Window   frame_xwindow)
 {
@@ -242,7 +242,7 @@
   return FALSE;
 }
 
-void
+LOCAL_SYMBOL void
 meta_core_user_lower_and_unfocus (Display *xdisplay,
                                   Window   frame_xwindow,
                                   guint32  timestamp)
@@ -260,7 +260,7 @@
                                        timestamp);
 }
 
-void
+LOCAL_SYMBOL void
 meta_core_lower_beneath_grab_window (Display *xdisplay,
                                      Window   xwindow,
                                      guint32  timestamp)
@@ -294,7 +294,7 @@
   meta_error_trap_pop (display);
 }
 
-void
+LOCAL_SYMBOL void
 meta_core_user_focus (Display *xdisplay,
                       Window   frame_xwindow,
                       guint32  timestamp)
@@ -304,7 +304,7 @@
   meta_window_focus (window, timestamp);
 }
 
-void
+LOCAL_SYMBOL void
 meta_core_minimize (Display *xdisplay,
                     Window   frame_xwindow)
 {
@@ -313,7 +313,7 @@
   meta_window_minimize (window);
 }
 
-void
+LOCAL_SYMBOL void
 meta_core_maximize (Display *xdisplay,
                     Window   frame_xwindow)
 {
@@ -326,7 +326,7 @@
                         META_MAXIMIZE_HORIZONTAL | META_MAXIMIZE_VERTICAL);
 }
 
-void
+LOCAL_SYMBOL void
 meta_core_toggle_maximize_vertically (Display *xdisplay,
 				      Window   frame_xwindow)
 {
@@ -343,7 +343,7 @@
     			    META_MAXIMIZE_VERTICAL);
 }
 
-void
+LOCAL_SYMBOL void
 meta_core_toggle_maximize_horizontally (Display *xdisplay,
 				        Window   frame_xwindow)
 {
@@ -360,7 +360,7 @@
     			    META_MAXIMIZE_HORIZONTAL);
 }
 
-void
+LOCAL_SYMBOL void
 meta_core_toggle_maximize (Display *xdisplay,
                            Window   frame_xwindow)
 {
@@ -377,7 +377,7 @@
                           META_MAXIMIZE_HORIZONTAL | META_MAXIMIZE_VERTICAL);
 }
 
-void
+LOCAL_SYMBOL void
 meta_core_unmaximize (Display *xdisplay,
                       Window   frame_xwindow)
 {
@@ -390,7 +390,7 @@
                           META_MAXIMIZE_HORIZONTAL | META_MAXIMIZE_VERTICAL);
 }
 
-void
+LOCAL_SYMBOL void
 meta_core_delete (Display *xdisplay,
                   Window   frame_xwindow,
                   guint32  timestamp)
@@ -400,7 +400,7 @@
   meta_window_delete (window, timestamp);
 }
 
-void
+LOCAL_SYMBOL void
 meta_core_unshade (Display *xdisplay,
                    Window   frame_xwindow,
                    guint32  timestamp)
@@ -410,7 +410,7 @@
   meta_window_unshade (window, timestamp);
 }
 
-void
+LOCAL_SYMBOL void
 meta_core_shade (Display *xdisplay,
                  Window   frame_xwindow,
                  guint32  timestamp)
@@ -420,7 +420,7 @@
   meta_window_shade (window, timestamp);
 }
 
-void
+LOCAL_SYMBOL void
 meta_core_unstick (Display *xdisplay,
                    Window   frame_xwindow)
 {
@@ -429,7 +429,7 @@
   meta_window_unstick (window);
 }
 
-void
+LOCAL_SYMBOL void
 meta_core_make_above (Display *xdisplay,
                       Window   frame_xwindow)
 {
@@ -438,7 +438,7 @@
   meta_window_make_above (window);
 }
 
-void
+LOCAL_SYMBOL void
 meta_core_unmake_above (Display *xdisplay,
                         Window   frame_xwindow)
 {
@@ -447,7 +447,7 @@
   meta_window_unmake_above (window);
 }
 
-void
+LOCAL_SYMBOL void
 meta_core_stick (Display *xdisplay,
                  Window   frame_xwindow)
 {
@@ -456,7 +456,7 @@
   meta_window_stick (window);
 }
 
-void
+LOCAL_SYMBOL void
 meta_core_change_workspace (Display *xdisplay,
                             Window   frame_xwindow,
                             int      new_workspace)
@@ -468,7 +468,7 @@
                                                                     new_workspace));
 }
 
-int
+LOCAL_SYMBOL int
 meta_core_get_num_workspaces (Screen  *xscreen)
 {
   MetaScreen *screen;
@@ -478,7 +478,7 @@
   return meta_screen_get_n_workspaces (screen);
 }
 
-int
+LOCAL_SYMBOL int
 meta_core_get_active_workspace (Screen *xscreen)
 {
   MetaScreen *screen;
@@ -488,7 +488,7 @@
   return meta_workspace_index (screen->active_workspace);
 }
 
-void
+LOCAL_SYMBOL void
 meta_core_show_window_menu (Display *xdisplay,
                             Window   frame_xwindow,
                             int      root_x,
@@ -505,7 +505,7 @@
   meta_window_show_menu (window, root_x, root_y, button, timestamp);
 }
 
-void
+LOCAL_SYMBOL void
 meta_core_get_menu_accelerator (MetaMenuOp           menu_op,
                                 int                  workspace,
                                 unsigned int        *keysym,
@@ -619,7 +619,7 @@
     }
 }
 
-const char*
+LOCAL_SYMBOL const char*
 meta_core_get_workspace_name_with_index (Display *xdisplay,
                                          Window   xroot,
                                          int      index)
@@ -635,7 +635,7 @@
   return workspace ? meta_workspace_get_name (workspace) : NULL;
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_core_begin_grab_op (Display    *xdisplay,
                          Window      frame_xwindow,
                          MetaGrabOp  op,
@@ -663,7 +663,7 @@
                                      timestamp, root_x, root_y);
 }
 
-void
+LOCAL_SYMBOL void
 meta_core_end_grab_op (Display *xdisplay,
                        guint32  timestamp)
 {
@@ -674,7 +674,7 @@
   meta_display_end_grab_op (display, timestamp);
 }
 
-MetaGrabOp
+LOCAL_SYMBOL MetaGrabOp
 meta_core_get_grab_op (Display *xdisplay)
 {
   MetaDisplay *display;
@@ -684,7 +684,7 @@
   return display->grab_op;
 }
 
-Window
+LOCAL_SYMBOL Window
 meta_core_get_grab_frame (Display *xdisplay)
 {
   MetaDisplay *display;
@@ -705,7 +705,7 @@
     return None;
 }
 
-int
+LOCAL_SYMBOL int
 meta_core_get_grab_button (Display  *xdisplay)
 {
   MetaDisplay *display;
@@ -718,7 +718,7 @@
   return display->grab_button;
 }
 
-void
+LOCAL_SYMBOL void
 meta_core_grab_buttons  (Display *xdisplay,
                          Window   frame_xwindow)
 {
@@ -730,7 +730,7 @@
   meta_display_grab_window_buttons (display, frame_xwindow);
 }
 
-void
+LOCAL_SYMBOL void
 meta_core_set_screen_cursor (Display *xdisplay,
                              Window   frame_on_screen,
                              MetaCursor cursor)
@@ -740,7 +740,7 @@
   meta_frame_set_screen_cursor (window->frame, cursor);
 }
 
-void
+LOCAL_SYMBOL void
 meta_core_increment_event_serial (Display *xdisplay)
 {
   MetaDisplay *display;
@@ -750,7 +750,7 @@
   meta_display_increment_event_serial (display);
 }
 
-void
+LOCAL_SYMBOL void
 meta_invalidate_default_icons (void)
 {
   MetaDisplay *display = meta_get_display ();
--- a/src/core/delete.c
+++ b/src/core/delete.c
@@ -193,7 +193,7 @@
 }
 
 
-void
+LOCAL_SYMBOL void
 meta_window_kill (MetaWindow *window)
 {
   meta_topic (META_DEBUG_WINDOW_OPS,
@@ -221,7 +221,7 @@
   meta_error_trap_pop (window->display);
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_free_delete_dialog (MetaWindow *window)
 {
   if (window->dialog_pid >= 0)
--- a/src/core/display.c
+++ b/src/core/display.c
@@ -187,7 +187,7 @@
 static void    sanity_check_timestamps   (MetaDisplay *display,
                                           guint32      known_good_timestamp);
 
-MetaGroup*     get_focussed_group (MetaDisplay *display);
+static MetaGroup*     get_focussed_group (MetaDisplay *display);
 
 static void
 meta_display_get_property(GObject         *object,
@@ -427,7 +427,7 @@
  *
  * \ingroup main
  */
-gboolean
+LOCAL_SYMBOL gboolean
 meta_display_open (void)
 {
   Display *xdisplay;
@@ -990,7 +990,7 @@
   return winlist;
 }
 
-void
+LOCAL_SYMBOL void
 meta_display_close (MetaDisplay *display,
                     guint32      timestamp)
 {
@@ -1096,7 +1096,7 @@
   return NULL;
 }
 
-MetaScreen*
+LOCAL_SYMBOL MetaScreen*
 meta_display_screen_for_xwindow (MetaDisplay *display,
                                  Window       xwindow)
 {
@@ -1118,7 +1118,7 @@
   return meta_display_screen_for_x_screen (display, attr.screen);
 }
 
-MetaScreen*
+LOCAL_SYMBOL MetaScreen*
 meta_display_screen_for_x_screen (MetaDisplay *display,
                                   Screen      *xscreen)
 {
@@ -1139,7 +1139,7 @@
 }
 
 /* Grab/ungrab routines taken from fvwm */
-void
+LOCAL_SYMBOL void
 meta_display_grab (MetaDisplay *display)
 {
   if (display->server_grab_count == 0)
@@ -1151,7 +1151,7 @@
                 display->server_grab_count);
 }
 
-void
+LOCAL_SYMBOL void
 meta_display_ungrab (MetaDisplay *display)
 {
   if (display->server_grab_count == 0)
@@ -1182,7 +1182,7 @@
  * \return  The singleton X display, or NULL if "xdisplay" isn't the one
  *          we're managing.
  */
-MetaDisplay*
+LOCAL_SYMBOL MetaDisplay*
 meta_display_for_x_display (Display *xdisplay)
 {
   if (the_display->xdisplay == xdisplay)
@@ -1200,7 +1200,7 @@
  * \return  The only MetaDisplay there is.  This can be NULL, but only
  *          during startup.
  */
-MetaDisplay*
+LOCAL_SYMBOL MetaDisplay*
 meta_get_display (void)
 {
   return the_display;
@@ -1293,7 +1293,7 @@
     }
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_grab_op_is_resizing (MetaGrabOp op)
 {
   switch (op)
@@ -1322,7 +1322,7 @@
     }
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_grab_op_is_moving (MetaGrabOp op)
 {
   switch (op)
@@ -1539,7 +1539,7 @@
   return FALSE;
 }
 
-void
+LOCAL_SYMBOL void
 meta_display_queue_autoraise_callback (MetaDisplay *display,
                                        MetaWindow  *window)
 {
@@ -2824,7 +2824,7 @@
 }
 
 #ifdef WITH_VERBOSE_MODE
-const char*
+LOCAL_SYMBOL const char*
 meta_event_detail_to_string (int d)
 {
   const char *detail = "???";
@@ -2863,7 +2863,7 @@
 #endif /* WITH_VERBOSE_MODE */
 
 #ifdef WITH_VERBOSE_MODE
-const char*
+LOCAL_SYMBOL const char*
 meta_event_mode_to_string (int m)
 {
   const char *mode = "???";
@@ -3285,14 +3285,14 @@
 }
 #endif /* WITH_VERBOSE_MODE */
 
-MetaWindow*
+LOCAL_SYMBOL MetaWindow*
 meta_display_lookup_x_window (MetaDisplay *display,
                               Window       xwindow)
 {
   return g_hash_table_lookup (display->window_ids, &xwindow);
 }
 
-void
+LOCAL_SYMBOL void
 meta_display_register_x_window (MetaDisplay *display,
                                 Window      *xwindowp,
                                 MetaWindow  *window)
@@ -3302,7 +3302,7 @@
   g_hash_table_insert (display->window_ids, xwindowp, window);
 }
 
-void
+LOCAL_SYMBOL void
 meta_display_unregister_x_window (MetaDisplay *display,
                                   Window       xwindow)
 {
@@ -3314,7 +3314,7 @@
   remove_pending_pings_for_window (display, xwindow);
 }
 
-void
+LOCAL_SYMBOL void
 meta_display_notify_window_created (MetaDisplay  *display,
                                     MetaWindow   *window)
 {
@@ -3348,7 +3348,7 @@
   return is_a_no_focus_window;
 }
 
-Cursor
+LOCAL_SYMBOL Cursor
 meta_display_create_x_cursor (MetaDisplay *display,
                               MetaCursor cursor)
 {
@@ -3457,7 +3457,7 @@
   return meta_display_create_x_cursor (display, cursor);
 }
 
-void
+LOCAL_SYMBOL void
 meta_display_set_grab_op_cursor (MetaDisplay *display,
                                  MetaScreen  *screen,
                                  MetaGrabOp   op,
@@ -3876,7 +3876,7 @@
   return display->grab_op;
 }
 
-void
+LOCAL_SYMBOL void
 meta_display_check_threshold_reached (MetaDisplay *display,
                                       int          x,
                                       int          y)
@@ -3955,7 +3955,7 @@
   meta_error_trap_pop (display);
 }
 
-void
+LOCAL_SYMBOL void
 meta_display_grab_window_buttons (MetaDisplay *display,
                                   Window       xwindow)
 {  
@@ -4005,7 +4005,7 @@
     }
 }
 
-void
+LOCAL_SYMBOL void
 meta_display_ungrab_window_buttons  (MetaDisplay *display,
                                      Window       xwindow)
 {
@@ -4033,7 +4033,7 @@
 
 /* Grab buttons we only grab while unfocused in click-to-focus mode */
 #define MAX_FOCUS_BUTTON 4
-void
+LOCAL_SYMBOL void
 meta_display_grab_focus_window_button (MetaDisplay *display,
                                        MetaWindow  *window)
 {
@@ -4082,7 +4082,7 @@
   }
 }
 
-void
+LOCAL_SYMBOL void
 meta_display_ungrab_focus_window_button (MetaDisplay *display,
                                          MetaWindow  *window)
 {
@@ -4105,7 +4105,7 @@
   }
 }
 
-void
+LOCAL_SYMBOL void
 meta_display_increment_event_serial (MetaDisplay *display)
 {
   /* We just make some random X request */
@@ -4113,7 +4113,7 @@
                    display->atom__MOTIF_WM_HINTS);
 }
 
-void
+LOCAL_SYMBOL void
 meta_display_update_active_window_hint (MetaDisplay *display)
 {
   GSList *tmp;
@@ -4142,7 +4142,7 @@
     }
 }
 
-void
+LOCAL_SYMBOL void
 meta_display_queue_retheme_all_windows (MetaDisplay *display)
 {
   GSList* windows;
@@ -4166,13 +4166,13 @@
   g_slist_free (windows);
 }
 
-void
+LOCAL_SYMBOL void
 meta_display_retheme_all (void)
 {
   meta_display_queue_retheme_all_windows (meta_get_display ());
 }
 
-void 
+LOCAL_SYMBOL void 
 meta_display_set_cursor_theme (const char *theme, 
 			       int         size)
 {
@@ -4306,7 +4306,7 @@
  *
  * \ingroup pings
  */
-void
+LOCAL_SYMBOL void
 meta_display_ping_window (MetaDisplay       *display,
 			  MetaWindow        *window,
 			  guint32            timestamp,
@@ -4481,7 +4481,7 @@
  *
  * \ingroup pings
  */
-gboolean
+LOCAL_SYMBOL gboolean
 meta_display_window_has_pending_pings (MetaDisplay *display,
 				       MetaWindow  *window)
 {
@@ -4498,7 +4498,7 @@
   return FALSE;
 }
 
-MetaGroup*
+static MetaGroup*
 get_focussed_group (MetaDisplay *display)
 {
   if (display->focus_window)
@@ -4784,7 +4784,7 @@
     return NULL;
 }
 
-int
+LOCAL_SYMBOL int
 meta_resize_gravity_from_grab_op (MetaGrabOp op)
 {
   int gravity;
@@ -5067,7 +5067,7 @@
     meta_display_close (display, timestamp);
 }
 
-void
+LOCAL_SYMBOL void
 meta_display_unmanage_windows_for_screen (MetaDisplay *display,
                                           MetaScreen  *screen,
                                           guint32      timestamp)
@@ -5099,7 +5099,7 @@
   g_slist_free (winlist);
 }
 
-int
+LOCAL_SYMBOL int
 meta_display_stack_cmp (const void *a,
                         const void *b)
 {
@@ -5145,7 +5145,7 @@
   return copy;
 }
 
-void
+LOCAL_SYMBOL void
 meta_display_devirtualize_modifiers (MetaDisplay        *display,
                                      MetaVirtualModifier modifiers,
                                      unsigned int       *mask)
@@ -5242,7 +5242,7 @@
     }
 }
 
-void
+LOCAL_SYMBOL void
 meta_display_increment_focus_sentinel (MetaDisplay *display)
 {
   unsigned long data[1];
@@ -5258,7 +5258,7 @@
   display->sentinel_counter += 1;
 }
 
-void
+LOCAL_SYMBOL void
 meta_display_decrement_focus_sentinel (MetaDisplay *display)
 {
   display->sentinel_counter -= 1;
@@ -5267,7 +5267,7 @@
     display->sentinel_counter = 0;
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_display_focus_sentinel_clear (MetaDisplay *display)
 {
   return (display->sentinel_counter == 0);
@@ -5414,7 +5414,7 @@
   meta_display_remove_autoraise_callback (display);
 }
 
-void
+LOCAL_SYMBOL void
 meta_display_remove_autoraise_callback (MetaDisplay *display)
 {
   if (display->autoraise_timeout_id != 0)
@@ -5425,7 +5425,7 @@
     }
 }
 
-void
+LOCAL_SYMBOL void
 meta_display_overlay_key_activate (MetaDisplay *display)
 {
   g_signal_emit (display, display_signals[OVERLAY_KEY], 0);
--- a/src/core/edge-resistance.c
+++ b/src/core/edge-resistance.c
@@ -668,7 +668,7 @@
   return modified;
 }
 
-void
+LOCAL_SYMBOL void
 meta_display_cleanup_edges (MetaDisplay *display)
 {
   guint i,j;
@@ -1138,7 +1138,7 @@
 /* Note that old_[xy] and new_[xy] are with respect to inner positions of
  * the window.
  */
-void
+LOCAL_SYMBOL void
 meta_window_edge_resistance_for_move (MetaWindow  *window,
                                       int          old_x,
                                       int          old_y,
@@ -1222,7 +1222,7 @@
 /* Note that old_(width|height) and new_(width|height) are with respect to
  * sizes of the inner window.
  */
-void
+LOCAL_SYMBOL void
 meta_window_edge_resistance_for_resize (MetaWindow  *window,
                                         int          old_width,
                                         int          old_height,
--- a/src/core/eventqueue.c
+++ b/src/core/eventqueue.c
@@ -21,6 +21,10 @@
  * Foundation, Inc., 51 Franklin Street - Suite 500, Boston, MA
  * 02110-1335, USA.  */
 
+#if HAVE_CONFIG_H
+#include <config.h>
+#endif
+
 #include "eventqueue.h"
 #include <X11/Xlib.h>
 
@@ -49,7 +53,7 @@
   GQueue *events;
 };
 
-MetaEventQueue*
+LOCAL_SYMBOL MetaEventQueue*
 meta_event_queue_new (Display *display, MetaEventQueueFunc func, gpointer data)
 {
   GSource *source;
@@ -78,7 +82,7 @@
   return eq;
 }
 
-void
+LOCAL_SYMBOL void
 meta_event_queue_free (MetaEventQueue *eq)
 {
   GSource *source;
--- a/src/core/frame.c
+++ b/src/core/frame.c
@@ -40,7 +40,7 @@
                     FocusChangeMask |                              \
                     ColormapChangeMask)
 
-void
+LOCAL_SYMBOL void
 meta_window_ensure_frame (MetaWindow *window)
 {
   MetaFrame *frame;
@@ -169,7 +169,7 @@
   meta_display_ungrab (window->display);
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_destroy_frame (MetaWindow *window)
 {
   MetaFrame *frame;
@@ -237,7 +237,7 @@
 }
 
 
-MetaFrameFlags
+LOCAL_SYMBOL MetaFrameFlags
 meta_frame_get_flags (MetaFrame *frame)
 {
   MetaFrameFlags flags;
@@ -318,7 +318,7 @@
   self->visible.right  = self->invisible.right  = self->total.right  = 0;
 }
 
-void
+LOCAL_SYMBOL void
 meta_frame_calc_borders (MetaFrame        *frame,
                          MetaFrameBorders *borders)
 {
@@ -332,7 +332,7 @@
                                borders);
 }
 
-void
+LOCAL_SYMBOL void
 meta_frame_get_corner_radiuses (MetaFrame *frame,
                                 float     *top_left,
                                 float     *top_right,
@@ -345,7 +345,7 @@
                                bottom_left, bottom_right);
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_frame_sync_to_window (MetaFrame *frame,
                            int        resize_gravity,
                            gboolean   need_move,
@@ -391,7 +391,7 @@
   return need_resize;
 }
 
-cairo_region_t *
+LOCAL_SYMBOL cairo_region_t *
 meta_frame_get_frame_bounds (MetaFrame *frame)
 {
   return meta_ui_get_frame_bounds (frame->window->screen->ui,
@@ -400,14 +400,14 @@
                                    frame->rect.height);
 }
 
-void
+LOCAL_SYMBOL void
 meta_frame_queue_draw (MetaFrame *frame)
 {
   meta_ui_queue_frame_draw (frame->window->screen->ui,
                             frame->xwindow);
 }
 
-void
+LOCAL_SYMBOL void
 meta_frame_set_screen_cursor (MetaFrame	*frame,
 			      MetaCursor cursor)
 {
@@ -426,7 +426,7 @@
     }
 }
 
-Window
+LOCAL_SYMBOL Window
 meta_frame_get_xwindow (MetaFrame *frame)
 {
   return frame->xwindow;
--- a/src/core/group-props.c
+++ b/src/core/group-props.c
@@ -50,14 +50,14 @@
 
 
 
-void
+LOCAL_SYMBOL void
 meta_group_reload_property (MetaGroup *group,
                             Atom       property)
 {
   meta_group_reload_properties (group, &property, 1);
 }
 
-void
+LOCAL_SYMBOL void
 meta_group_reload_properties (MetaGroup  *group,
                               const Atom *properties,
                               int         n_properties)
@@ -168,7 +168,7 @@
 
 #define N_HOOKS 3
 
-void
+LOCAL_SYMBOL void
 meta_display_init_group_prop_hooks (MetaDisplay *display)
 {
   int i;
@@ -202,7 +202,7 @@
     }
 }
 
-void
+LOCAL_SYMBOL void
 meta_display_free_group_prop_hooks (MetaDisplay *display)
 {
   g_assert (display->group_prop_hooks != NULL);
--- a/src/core/iconcache.c
+++ b/src/core/iconcache.c
@@ -536,7 +536,7 @@
   return;
 }
 
-void
+LOCAL_SYMBOL void
 meta_icon_cache_init (MetaIconCache *icon_cache)
 {
   g_return_if_fail (icon_cache != NULL);
@@ -582,13 +582,13 @@
     }
 }
 
-void
+LOCAL_SYMBOL void
 meta_icon_cache_free (MetaIconCache *icon_cache)
 {
   clear_icon_cache (icon_cache, FALSE);
 }
 
-void
+LOCAL_SYMBOL void
 meta_icon_cache_property_changed (MetaIconCache *icon_cache,
                                   MetaDisplay   *display,
                                   Atom           atom)
@@ -601,7 +601,7 @@
     icon_cache->wm_hints_dirty = TRUE;
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_icon_cache_get_icon_invalidated (MetaIconCache *icon_cache)
 {
   if (icon_cache->origin <= USING_KWM_WIN_ICON &&
@@ -704,7 +704,7 @@
   return dest;
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_read_icons (MetaScreen     *screen,
                  Window          xwindow,
                  MetaIconCache  *icon_cache,
--- a/src/core/keybindings.c
+++ b/src/core/keybindings.c
@@ -686,7 +686,7 @@
     return META_KEYBINDING_ACTION_NONE;
 }
 
-void
+LOCAL_SYMBOL void
 meta_display_process_mapping_event (MetaDisplay *display,
                                     XEvent      *event)
 { 
@@ -763,7 +763,7 @@
 }
 
 
-void
+LOCAL_SYMBOL void
 meta_display_shutdown_keys (MetaDisplay *display)
 {
   /* Note that display->xdisplay is invalid in this function */
@@ -931,7 +931,7 @@
     meta_error_trap_pop (display);
 }
 
-void
+LOCAL_SYMBOL void
 meta_screen_grab_keys (MetaScreen *screen)
 {
   MetaDisplay *display = screen->display;  
@@ -955,7 +955,7 @@
   screen->keys_grabbed = TRUE;
 }
 
-void
+LOCAL_SYMBOL void
 meta_screen_ungrab_keys (MetaScreen  *screen)
 {
   if (screen->keys_grabbed)
@@ -965,7 +965,7 @@
     }
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_grab_keys (MetaWindow  *window)
 {
   if (window->all_keys_grabbed)
@@ -1001,7 +1001,7 @@
   window->grab_on_frame = window->frame != NULL;
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_ungrab_keys (MetaWindow  *window)
 {
   if (window->keys_grabbed)
@@ -1136,7 +1136,7 @@
     }
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_window_grab_all_keys (MetaWindow  *window,
                            guint32      timestamp)
 {
@@ -1172,7 +1172,7 @@
   return retval;
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_ungrab_all_keys (MetaWindow *window, guint32 timestamp)
 {
   if (window->all_keys_grabbed)
@@ -1529,7 +1529,7 @@
  * FIXME: An iterative solution would probably be simpler to understand
  * (and help us solve the other fixmes).
  */
-gboolean
+LOCAL_SYMBOL gboolean
 meta_display_process_key_event (MetaDisplay *display,
                                 MetaWindow  *window,
                                 XEvent      *event)
@@ -3593,7 +3593,7 @@
   meta_verbose ("-- MARK MARK MARK MARK --\n");
 }
 
-void
+LOCAL_SYMBOL void
 meta_set_keybindings_disabled (gboolean setting)
 {
   all_bindings_disabled = setting;
@@ -4215,7 +4215,7 @@
                           handle_move_to_center, 0);
 }
 
-void
+LOCAL_SYMBOL void
 meta_display_init_keys (MetaDisplay *display)
 {
   /* Keybindings */
--- a/src/core/place.c
+++ b/src/core/place.c
@@ -650,7 +650,7 @@
   return retval;
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_place (MetaWindow        *window,
                    MetaFrameBorders  *borders,
                    int                x,
--- a/src/core/prefs.c
+++ b/src/core/prefs.c
@@ -1918,7 +1918,7 @@
   return visual_bell_type;
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_prefs_add_keybinding (const char           *name,
                            const char           *schema,
                            MetaKeyBindingAction  action,
@@ -1975,7 +1975,7 @@
   return TRUE;
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_prefs_remove_keybinding (const char *name)
 {
   MetaKeyPref *pref;
--- a/src/core/screen.c
+++ b/src/core/screen.c
@@ -691,7 +691,7 @@
   return guard_window;
 }
 
-MetaScreen*
+LOCAL_SYMBOL MetaScreen*
 meta_screen_new (MetaDisplay *display,
                  int          number,
                  guint32      timestamp)
@@ -960,7 +960,7 @@
   return screen;
 }
 
-void
+LOCAL_SYMBOL void
 meta_screen_free (MetaScreen *screen,
                   guint32     timestamp)
 {
@@ -1086,7 +1086,7 @@
   return g_list_reverse (result);
 }
 
-void
+LOCAL_SYMBOL void
 meta_screen_manage_all_windows (MetaScreen *screen)
 {
   GList *windows;
@@ -1117,7 +1117,7 @@
   meta_display_ungrab (screen->display);
 }
 
-void
+LOCAL_SYMBOL void
 meta_screen_composite_all_windows (MetaScreen *screen)
 {
   MetaDisplay *display;
@@ -1255,7 +1255,7 @@
  * Calls the specified function for each window on the screen,
  * ignoring override-redirect windows.
  */
-void
+LOCAL_SYMBOL void
 meta_screen_foreach_window (MetaScreen *screen,
                             MetaScreenWindowFunc func,
                             gpointer data)
@@ -1301,7 +1301,7 @@
     meta_frame_queue_draw (window->frame);
 }
 
-void
+LOCAL_SYMBOL void
 meta_screen_queue_frame_redraws (MetaScreen *screen)
 {
   meta_screen_foreach_window (screen, queue_draw, NULL);
@@ -1313,7 +1313,7 @@
   meta_window_queue (window, META_QUEUE_MOVE_RESIZE);
 }
 
-void
+LOCAL_SYMBOL void
 meta_screen_queue_window_resizes (MetaScreen *screen)
 {
   meta_screen_foreach_window (screen, queue_resize, NULL);
@@ -1650,7 +1650,7 @@
   /* nothing to do anymore */ ;
 }
 
-void
+LOCAL_SYMBOL void
 meta_screen_set_cursor (MetaScreen *screen,
                         MetaCursor  cursor)
 {
@@ -1667,7 +1667,7 @@
   XFreeCursor (screen->display->xdisplay, xcursor);
 }
 
-void
+LOCAL_SYMBOL void
 meta_screen_update_cursor (MetaScreen *screen)
 {
   Cursor xcursor;
@@ -1679,7 +1679,7 @@
   XFreeCursor (screen->display->xdisplay, xcursor);
 }
 
-void
+LOCAL_SYMBOL void
 meta_screen_tab_popup_create (MetaScreen      *screen,
                               MetaTabList      list_type,
                               MetaTabShowType  show_type,
@@ -1793,7 +1793,7 @@
     meta_ui_tab_popup_set_showing (screen->tab_popup, TRUE);
 }
 
-void
+LOCAL_SYMBOL void
 meta_screen_tab_popup_forward (MetaScreen *screen)
 {
   g_return_if_fail (screen->tab_popup != NULL);
@@ -1801,7 +1801,7 @@
   meta_ui_tab_popup_forward (screen->tab_popup);
 }
 
-void
+LOCAL_SYMBOL void
 meta_screen_tab_popup_backward (MetaScreen *screen)
 {
   g_return_if_fail (screen->tab_popup != NULL);
@@ -1809,7 +1809,7 @@
   meta_ui_tab_popup_backward (screen->tab_popup);
 }
 
-MetaWindow *
+LOCAL_SYMBOL MetaWindow *
 meta_screen_tab_popup_get_selected (MetaScreen *screen)
 {
   g_return_val_if_fail (screen->tab_popup != NULL, NULL);
@@ -1817,7 +1817,7 @@
   return (MetaWindow *) meta_ui_tab_popup_get_selected (screen->tab_popup);
 }
 
-void
+LOCAL_SYMBOL void
 meta_screen_tab_popup_destroy (MetaScreen *screen)
 {
   if (screen->tab_popup)
@@ -1827,7 +1827,7 @@
     }
 }
 
-void
+LOCAL_SYMBOL void
 meta_screen_workspace_popup_create (MetaScreen    *screen,
                                     MetaWorkspace *initial_selection)
 {
@@ -1898,7 +1898,7 @@
   meta_ui_tab_popup_set_showing (screen->ws_popup, TRUE);
 }
 
-void
+LOCAL_SYMBOL void
 meta_screen_workspace_popup_select (MetaScreen    *screen,
                                     MetaWorkspace *workspace)
 {
@@ -1908,7 +1908,7 @@
                             (MetaTabEntryKey) workspace);
 }
 
-MetaWorkspace *
+LOCAL_SYMBOL MetaWorkspace *
 meta_screen_workspace_popup_get_selected (MetaScreen *screen)
 {
   g_return_val_if_fail (screen->ws_popup != NULL, NULL);
@@ -1916,7 +1916,7 @@
   return (MetaWorkspace *) meta_ui_tab_popup_get_selected (screen->ws_popup);
 }
 
-void
+LOCAL_SYMBOL void
 meta_screen_workspace_popup_destroy (MetaScreen *screen)
 {
   if (screen->ws_popup)
@@ -1984,7 +1984,7 @@
 
 #define TILE_PREVIEW_TIMEOUT_MS 200
 
-void
+LOCAL_SYMBOL void
 meta_screen_tile_preview_update (MetaScreen *screen,
                                  gboolean    delay)
 {
@@ -2007,7 +2007,7 @@
     }
 }
 
-void
+LOCAL_SYMBOL void
 meta_screen_tile_preview_hide (MetaScreen *screen)
 {
   if (screen->tile_preview_timeout_id > 0)
@@ -2017,7 +2017,7 @@
     meta_tile_preview_hide (screen->tile_preview);
 }
 
-MetaWindow*
+LOCAL_SYMBOL MetaWindow*
 meta_screen_get_mouse_window (MetaScreen  *screen,
                               MetaWindow  *not_this_one)
 {
@@ -2052,7 +2052,7 @@
   return window;
 }
 
-const MetaMonitorInfo*
+LOCAL_SYMBOL const MetaMonitorInfo*
 meta_screen_get_monitor_for_rect (MetaScreen    *screen,
                                   MetaRectangle *rect)
 {
@@ -2084,7 +2084,7 @@
   return &screen->monitor_infos[best_monitor];
 }
 
-const MetaMonitorInfo*
+LOCAL_SYMBOL const MetaMonitorInfo*
 meta_screen_get_monitor_for_window (MetaScreen *screen,
                                     MetaWindow *window)
 {
@@ -2095,7 +2095,7 @@
   return meta_screen_get_monitor_for_rect (screen, &window_rect);
 }
 
-const MetaMonitorInfo* 
+LOCAL_SYMBOL const MetaMonitorInfo* 
 meta_screen_get_monitor_neighbor (MetaScreen         *screen,
                                   int                 which_monitor,
                                   MetaScreenDirection direction)
@@ -2128,7 +2128,7 @@
   return NULL;
 }
 
-void
+LOCAL_SYMBOL void
 meta_screen_get_natural_monitor_list (MetaScreen *screen,
                                       int**       monitors_list,
                                       int*        n_monitors)
@@ -2223,7 +2223,7 @@
   g_queue_free (monitor_queue);
 }
 
-const MetaMonitorInfo*
+LOCAL_SYMBOL const MetaMonitorInfo*
 meta_screen_get_current_monitor (MetaScreen *screen)
 {
   if (screen->n_monitor_infos == 1)
@@ -2332,7 +2332,7 @@
 #define _NET_WM_BOTTOMRIGHT 2
 #define _NET_WM_BOTTOMLEFT  3
 
-void
+LOCAL_SYMBOL void
 meta_screen_update_workspace_layout (MetaScreen *screen)
 {
   gulong *list;
@@ -2505,7 +2505,7 @@
   g_string_free (flattened, TRUE);
 }
 
-void
+LOCAL_SYMBOL void
 meta_screen_update_workspace_names (MetaScreen *screen)
 {
   char **names;
@@ -2542,7 +2542,7 @@
   g_strfreev (names);
 }
 
-Window
+LOCAL_SYMBOL Window
 meta_create_offscreen_window (Display *xdisplay,
                               Window   parent,
                               long     valuemask)
@@ -2622,7 +2622,7 @@
   return FALSE;
 }
 
-void
+LOCAL_SYMBOL void
 meta_screen_queue_workarea_recalc (MetaScreen *screen)
 {
   /* Recompute work area later before redrawing */
@@ -2659,7 +2659,7 @@
 }
 #endif /* WITH_VERBOSE_MODE */
 
-void
+LOCAL_SYMBOL void
 meta_screen_calc_workspace_layout (MetaScreen          *screen,
                                    int                  num_workspaces,
                                    int                  current_space,
@@ -2928,7 +2928,7 @@
 #endif /* WITH_VERBOSE_MODE */
 }
 
-void
+LOCAL_SYMBOL void
 meta_screen_free_workspace_layout (MetaWorkspaceLayout *layout)
 {
   g_free (layout->grid);
@@ -2948,7 +2948,7 @@
   meta_window_recalc_features (window);
 }
 
-void
+LOCAL_SYMBOL void
 meta_screen_resize (MetaScreen *screen,
                     int         width,
                     int         height)
@@ -2989,7 +2989,7 @@
   g_signal_emit (screen, screen_signals[MONITORS_CHANGED], 0);
 }
 
-void
+LOCAL_SYMBOL void
 meta_screen_update_showing_desktop_hint (MetaScreen *screen)
 {
   unsigned long data[1];
@@ -3030,7 +3030,7 @@
   g_slist_free (windows);
 }
 
-void
+LOCAL_SYMBOL void
 meta_screen_minimize_all_on_active_workspace_except (MetaScreen *screen,
                                                      MetaWindow *keep)
 {
@@ -3323,7 +3323,7 @@
  * FALSE if they have not (for example, if they had already
  * been applied.)
  */
-gboolean
+LOCAL_SYMBOL gboolean
 meta_screen_apply_startup_properties (MetaScreen *screen,
                                       MetaWindow *window)
 {
@@ -3580,13 +3580,13 @@
   return screen->active_workspace;
 }
 
-void
+LOCAL_SYMBOL void
 meta_screen_restacked (MetaScreen *screen)
 {
   g_signal_emit (screen, screen_signals[RESTACKED], 0);
 }
 
-void
+LOCAL_SYMBOL void
 meta_screen_workspace_switched (MetaScreen         *screen,
                                 int                 from,
                                 int                 to,
@@ -3596,7 +3596,7 @@
                  from, to, direction);
 }
 
-void
+LOCAL_SYMBOL void
 meta_screen_set_active_workspace_hint (MetaScreen *screen)
 {
   unsigned long data[1];
--- a/src/core/session.c
+++ b/src/core/session.c
@@ -32,20 +32,20 @@
 #include <sys/wait.h>
 
 #ifndef HAVE_SM
-void
+LOCAL_SYMBOL void
 meta_session_init (const char *client_id,
                    const char *save_file)
 {
   meta_topic (META_DEBUG_SM, "Compiled without session management support\n");
 }
 
-const MetaWindowSessionInfo*
+LOCAL_SYMBOL const MetaWindowSessionInfo*
 meta_window_lookup_saved_state (MetaWindow *window)
 {
   return NULL;
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_release_saved_state (const MetaWindowSessionInfo *info)
 {
   ;
@@ -220,7 +220,7 @@
 static ClientState current_state = STATE_DISCONNECTED;
 static gboolean interaction_allowed = FALSE;
 
-void
+LOCAL_SYMBOL void
 meta_session_init (const char *previous_client_id,
                    const char *previous_save_file)
 {
@@ -1623,7 +1623,7 @@
     return infos->data;
 }
 
-const MetaWindowSessionInfo*
+LOCAL_SYMBOL const MetaWindowSessionInfo*
 meta_window_lookup_saved_state (MetaWindow *window)
 {
   GSList *possibles;
@@ -1658,7 +1658,7 @@
   return info;
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_release_saved_state (const MetaWindowSessionInfo *info)
 {
   /* We don't want to use the same saved state again for another
--- a/src/core/stack-tracker.c
+++ b/src/core/stack-tracker.c
@@ -357,7 +357,7 @@
   return stack;
 }
 
-MetaStackTracker *
+LOCAL_SYMBOL MetaStackTracker *
 meta_stack_tracker_new (MetaScreen *screen)
 {
   MetaStackTracker *tracker;
@@ -381,7 +381,7 @@
   return tracker;
 }
 
-void
+LOCAL_SYMBOL void
 meta_stack_tracker_free (MetaStackTracker *tracker)
 {
   if (tracker->sync_stack_later)
@@ -411,7 +411,7 @@
   meta_stack_tracker_dump (tracker);
 }
 
-void
+LOCAL_SYMBOL void
 meta_stack_tracker_record_add (MetaStackTracker *tracker,
 			       Window            window,
 			       gulong            serial)
@@ -425,7 +425,7 @@
   stack_tracker_queue_request (tracker, op);
 }
 
-void
+LOCAL_SYMBOL void
 meta_stack_tracker_record_remove (MetaStackTracker *tracker,
 				  Window            window,
 				  gulong            serial)
@@ -439,7 +439,7 @@
   stack_tracker_queue_request (tracker, op);
 }
 
-void
+LOCAL_SYMBOL void
 meta_stack_tracker_record_restack_windows (MetaStackTracker *tracker,
 					   Window           *windows,
 					   int               n_windows,
@@ -463,7 +463,7 @@
 					   serial + i);
 }
 
-void
+LOCAL_SYMBOL void
 meta_stack_tracker_record_raise_above (MetaStackTracker *tracker,
 				       Window            window,
 				       Window            sibling,
@@ -479,7 +479,7 @@
   stack_tracker_queue_request (tracker, op);
 }
 
-void
+LOCAL_SYMBOL LOCAL_SYMBOL void
 meta_stack_tracker_record_lower_below (MetaStackTracker *tracker,
 				       Window            window,
 				       Window            sibling,
@@ -495,7 +495,7 @@
   stack_tracker_queue_request (tracker, op);
 }
 
-void
+LOCAL_SYMBOL void
 meta_stack_tracker_record_lower (MetaStackTracker *tracker,
 				 Window            window,
 				 gulong            serial)
@@ -544,7 +544,7 @@
   meta_stack_tracker_dump (tracker);
 }
 
-void
+LOCAL_SYMBOL void
 meta_stack_tracker_create_event (MetaStackTracker    *tracker,
 				 XCreateWindowEvent  *event)
 {
@@ -557,7 +557,7 @@
   stack_tracker_event_received (tracker, &op);
 }
 
-void
+LOCAL_SYMBOL void
 meta_stack_tracker_destroy_event (MetaStackTracker    *tracker,
 				  XDestroyWindowEvent *event)
 {
@@ -570,7 +570,7 @@
   stack_tracker_event_received (tracker, &op);
 }
 
-void
+LOCAL_SYMBOL void
 meta_stack_tracker_reparent_event (MetaStackTracker    *tracker,
 				   XReparentEvent      *event)
 {
@@ -596,7 +596,7 @@
     }
 }
 
-void
+LOCAL_SYMBOL void
 meta_stack_tracker_configure_event (MetaStackTracker    *tracker,
 				    XConfigureEvent     *event)
 {
@@ -627,7 +627,7 @@
  * returned list of windows is exactly that you'd get as the
  * children when calling XQueryTree() on the root window.
  */
-void
+LOCAL_SYMBOL void
 meta_stack_tracker_get_stack (MetaStackTracker *tracker,
 			      Window          **windows,
 			      int              *n_windows)
@@ -669,7 +669,7 @@
  * Informs the compositor of the current stacking order of windows,
  * based on the predicted view maintained by the #MetaStackTracker.
  */
-void
+LOCAL_SYMBOL void
 meta_stack_tracker_sync_stack (MetaStackTracker *tracker)
 {
   GList *meta_windows;
@@ -734,7 +734,7 @@
  * any change to the stacking order of the X windows, if we are creating
  * or destroying MetaWindows.
  */
-void
+LOCAL_SYMBOL void
 meta_stack_tracker_queue_sync_stack (MetaStackTracker *tracker)
 {
   if (tracker->sync_stack_later == 0)
--- a/src/core/stack.c
+++ b/src/core/stack.c
@@ -63,7 +63,7 @@
 
 static void stack_ensure_sorted (MetaStack *stack);
 
-MetaStack*
+LOCAL_SYMBOL MetaStack*
 meta_stack_new (MetaScreen *screen)
 {
   MetaStack *stack;
@@ -89,7 +89,7 @@
   return stack;
 }
 
-void
+LOCAL_SYMBOL void
 meta_stack_free (MetaStack *stack)
 {
   g_array_free (stack->windows, TRUE);
@@ -104,7 +104,7 @@
   g_free (stack);
 }
 
-void
+LOCAL_SYMBOL void
 meta_stack_add (MetaStack  *stack,
                 MetaWindow *window)
 {
@@ -125,7 +125,7 @@
   meta_stack_update_window_tile_matches (stack, window->screen->active_workspace);
 }
 
-void
+LOCAL_SYMBOL void
 meta_stack_remove (MetaStack  *stack,
                    MetaWindow *window)
 {
@@ -161,7 +161,7 @@
   meta_stack_update_window_tile_matches (stack, window->screen->active_workspace);
 }
 
-void
+LOCAL_SYMBOL void
 meta_stack_update_layer (MetaStack  *stack,
                          MetaWindow *window)
 {
@@ -171,7 +171,7 @@
   meta_stack_update_window_tile_matches (stack, window->screen->active_workspace);
 }
 
-void
+LOCAL_SYMBOL void
 meta_stack_update_transient (MetaStack  *stack,
                              MetaWindow *window)
 {
@@ -182,7 +182,7 @@
 }
 
 /* raise/lower within a layer */
-void
+LOCAL_SYMBOL void
 meta_stack_raise (MetaStack  *stack,
                   MetaWindow *window)
 {
@@ -210,7 +210,7 @@
   meta_stack_update_window_tile_matches (stack, window->screen->active_workspace);
 }
 
-void
+LOCAL_SYMBOL void
 meta_stack_lower (MetaStack  *stack,
                   MetaWindow *window)
 {
@@ -238,13 +238,13 @@
   meta_stack_update_window_tile_matches (stack, window->screen->active_workspace);
 }
 
-void
+LOCAL_SYMBOL void
 meta_stack_freeze (MetaStack *stack)
 {
   stack->freeze_count += 1;
 }
 
-void
+LOCAL_SYMBOL void
 meta_stack_thaw (MetaStack *stack)
 {
   g_return_if_fail (stack->freeze_count > 0);
@@ -254,7 +254,7 @@
   meta_stack_update_window_tile_matches (stack, NULL);
 }
 
-void
+LOCAL_SYMBOL void
 meta_stack_update_window_tile_matches (MetaStack     *stack,
                                        MetaWorkspace *workspace)
 {
@@ -1362,7 +1362,7 @@
   /* That was scary... */
 }
 
-MetaWindow*
+LOCAL_SYMBOL MetaWindow*
 meta_stack_get_top (MetaStack *stack)
 {
   stack_ensure_sorted (stack);
@@ -1373,7 +1373,7 @@
     return NULL;
 }
 
-MetaWindow*
+LOCAL_SYMBOL MetaWindow*
 meta_stack_get_bottom (MetaStack  *stack)
 {
   GList *link;
@@ -1387,7 +1387,7 @@
     return NULL;
 }
 
-MetaWindow*
+LOCAL_SYMBOL MetaWindow*
 meta_stack_get_above (MetaStack      *stack,
                       MetaWindow     *window,
                       gboolean        only_within_layer)
@@ -1412,7 +1412,7 @@
     return above;
 }
 
-MetaWindow*
+LOCAL_SYMBOL MetaWindow*
 meta_stack_get_below (MetaStack      *stack,
                       MetaWindow     *window,
                       gboolean        only_within_layer)
@@ -1546,7 +1546,7 @@
     return topmost_dock;
 }
 
-MetaWindow*
+LOCAL_SYMBOL MetaWindow*
 meta_stack_get_default_focus_window_at_point (MetaStack     *stack,
                                               MetaWorkspace *workspace,
                                               MetaWindow    *not_this_one,
@@ -1557,7 +1557,7 @@
                                    TRUE, root_x, root_y);
 }
 
-MetaWindow*
+LOCAL_SYMBOL MetaWindow*
 meta_stack_get_default_focus_window (MetaStack     *stack,
                                      MetaWorkspace *workspace,
                                      MetaWindow    *not_this_one)
@@ -1566,7 +1566,7 @@
                                    FALSE, 0, 0);
 }
 
-GList*
+LOCAL_SYMBOL GList*
 meta_stack_list_windows (MetaStack     *stack,
                          MetaWorkspace *workspace)
 {
@@ -1594,7 +1594,7 @@
   return workspace_windows;
 }
 
-int
+LOCAL_SYMBOL int
 meta_stack_windows_cmp  (MetaStack  *stack,
                          MetaWindow *window_a,
                          MetaWindow *window_b)
@@ -1632,7 +1632,7 @@
     return 0; /* not reached */
 }
 
-GList*
+LOCAL_SYMBOL GList*
 meta_stack_get_positions (MetaStack *stack)
 {
   GList *tmp;
@@ -1683,7 +1683,7 @@
   return (tmp1 == NULL);    /* tmp2 is non-NULL if tmp1 is */
 }
 
-void
+LOCAL_SYMBOL void
 meta_stack_set_positions (MetaStack *stack,
                           GList     *windows)
 {
@@ -1776,7 +1776,7 @@
               window->desc, window->stack_position);
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_set_stack_position (MetaWindow *window,
                                 int         position)
 {
--- a/src/core/window-props.c
+++ b/src/core/window-props.c
@@ -77,7 +77,7 @@
                                         Atom         property);
 
 
-void
+LOCAL_SYMBOL void
 meta_window_reload_property (MetaWindow *window,
                              Atom        property,
                              gboolean    initial)
@@ -85,7 +85,7 @@
   meta_window_reload_properties (window, &property, 1, initial);
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_reload_properties (MetaWindow *window,
                                const Atom *properties,
                                int         n_properties,
@@ -98,7 +98,7 @@
                                               initial);
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_reload_property_from_xwindow (MetaWindow *window,
                                           Window      xwindow,
                                           Atom        property,
@@ -108,7 +108,7 @@
                                               initial);
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_reload_properties_from_xwindow (MetaWindow *window,
                                             Window      xwindow,
                                             const Atom *properties,
@@ -148,7 +148,7 @@
   g_free (values);
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_load_initial_properties (MetaWindow *window)
 {
   int i, j;
@@ -986,7 +986,7 @@
                 old->win_gravity, new->win_gravity);  
 }
 
-void
+LOCAL_SYMBOL void
 meta_set_normal_hints (MetaWindow *window,
                        XSizeHints *hints)
 {
@@ -1657,7 +1657,7 @@
  * was META_PROP_VALUE_INVALID, the callback still gets called anyway.)
  * This value may be NULL, in which case no callback will be called.
  */
-void
+LOCAL_SYMBOL void
 meta_display_init_window_prop_hooks (MetaDisplay *display)
 {
   /* INIT: load initially
@@ -1742,7 +1742,7 @@
   display->n_prop_hooks = cursor - table;
 }
 
-void
+LOCAL_SYMBOL void
 meta_display_free_window_prop_hooks (MetaDisplay *display)
 {
   g_hash_table_unref (display->prop_hooks);
--- a/src/core/window.c
+++ b/src/core/window.c
@@ -637,7 +637,7 @@
     }
 }
 
-MetaWindow*
+LOCAL_SYMBOL MetaWindow*
 meta_window_new (MetaDisplay *display,
                  Window       xwindow,
                  gboolean     must_be_viewable)
@@ -768,7 +768,7 @@
   return filtered;
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_window_should_attach_to_parent (MetaWindow *window)
 {
   MetaWindow *parent;
@@ -793,7 +793,7 @@
     }
 }
 
-MetaWindow*
+LOCAL_SYMBOL LOCAL_SYMBOL MetaWindow*
 meta_window_new_with_attrs (MetaDisplay       *display,
                             Window             xwindow,
                             gboolean           must_be_viewable,
@@ -1639,7 +1639,7 @@
   return TRUE;
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_unmanage (MetaWindow  *window,
                       guint32      timestamp)
 {
@@ -1919,7 +1919,7 @@
      !meta_window_is_on_primary_monitor (window));
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_update_on_all_workspaces (MetaWindow *window)
 {
   gboolean old_value;
@@ -2093,7 +2093,7 @@
     }
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_window_located_on_workspace (MetaWindow    *window,
                                   MetaWorkspace *workspace)
 {
@@ -2183,7 +2183,7 @@
   return showing;
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_window_should_be_showing (MetaWindow  *window)
 {
   gboolean on_workspace;
@@ -2236,7 +2236,7 @@
   window->pending_compositor_effect = META_COMP_EFFECT_NONE;
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_calc_showing (MetaWindow  *window)
 {
   implement_showing (window, meta_window_should_be_showing (window));
@@ -2461,7 +2461,7 @@
     }
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_queue (MetaWindow *window, guint queuebits)
 {
   guint queuenum;
@@ -2642,7 +2642,7 @@
  * behavior is worthwhile.  The basic idea is to get more feedback about how
  * usage scenarios of "strict" focus users and what they expect.  See #326159.
  */
-gboolean
+LOCAL_SYMBOL gboolean
 __window_is_terminal (MetaWindow *window)
 {
   if (window == NULL || window->res_class == NULL)
@@ -3492,7 +3492,7 @@
     }
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_maximize_internal (MetaWindow        *window,
                                MetaMaximizeFlags  directions,
                                MetaRectangle     *saved_rect)
@@ -3649,7 +3649,7 @@
   return window->monitor->is_primary;
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_tile (MetaWindow *window)
 {
   MetaMaximizeFlags directions;
@@ -3700,7 +3700,7 @@
   return window->has_maximize_func;
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_window_can_tile_side_by_side (MetaWindow *window)
 {
   const MetaMonitorInfo *monitor;
@@ -3933,7 +3933,7 @@
  * Unlike meta_window_unmaximize(), tiling is not restored for windows
  * with a tile mode other than META_TILE_NONE.
  */
-void
+LOCAL_SYMBOL void
 meta_window_unmaximize_with_gravity (MetaWindow        *window,
                                      MetaMaximizeFlags  directions,
                                      int                new_width,
@@ -3949,7 +3949,7 @@
   meta_window_unmaximize_internal (window, directions, &desired_rect, gravity);
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_make_above (MetaWindow  *window)
 {
   g_return_if_fail (!window->override_redirect);
@@ -3958,7 +3958,7 @@
   meta_window_raise (window);
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_unmake_above (MetaWindow  *window)
 {
   g_return_if_fail (!window->override_redirect);
@@ -3981,7 +3981,7 @@
   g_object_notify (G_OBJECT (window), "above");
 }
 
-void
+LOCAL_SYMBOL LOCAL_SYMBOL void
 meta_window_make_fullscreen_internal (MetaWindow  *window)
 {
   if (!window->fullscreen)
@@ -4017,7 +4017,7 @@
     }
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_make_fullscreen (MetaWindow  *window)
 {
   g_return_if_fail (!window->override_redirect);
@@ -4031,7 +4031,7 @@
     }
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_unmake_fullscreen (MetaWindow  *window)
 {
   g_return_if_fail (!window->override_redirect);
@@ -4073,7 +4073,7 @@
     }
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_update_fullscreen_monitors (MetaWindow    *window,
                                         unsigned long  top,
                                         unsigned long  bottom,
@@ -4101,7 +4101,7 @@
     }
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_shade (MetaWindow  *window,
                    guint32      timestamp)
 {
@@ -4127,7 +4127,7 @@
     }
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_unshade (MetaWindow  *window,
                      guint32      timestamp)
 {
@@ -4480,7 +4480,7 @@
 
 /* This is called when the monitor setup has changed. The window->monitor
  * reference is still "valid", but refer to the previous monitor setup */
-void
+LOCAL_SYMBOL void
 meta_window_update_for_monitors_changed (MetaWindow *window)
 {
   const MetaMonitorInfo *old, *new;
@@ -5238,7 +5238,7 @@
                                     w, h);
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_resize_with_gravity (MetaWindow *window,
                                  gboolean     user_op,
                                  int          w,
@@ -5339,7 +5339,7 @@
     meta_compositor_sync_window_geometry (window->display->compositor, window);
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_get_position (MetaWindow  *window,
                           int         *x,
                           int         *y)
@@ -5360,7 +5360,7 @@
     }
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_get_client_root_coords (MetaWindow    *window,
                                     MetaRectangle *rect)
 {
@@ -5369,7 +5369,7 @@
   rect->height = window->rect.height;
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_get_gravity_position (MetaWindow  *window,
                                   int          gravity,
                                   int         *root_x,
@@ -5453,7 +5453,7 @@
     *root_y = y;
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_get_geometry (MetaWindow  *window,
                           int         *x,
                           int         *y,
@@ -5573,7 +5573,7 @@
 }
 
 /* XXX META_EFFECT_FOCUS */
-void
+LOCAL_SYMBOL void
 meta_window_focus (MetaWindow  *window,
                    guint32      timestamp)
 {
@@ -5810,7 +5810,7 @@
                                  &stick);
 }
 
-unsigned long
+LOCAL_SYMBOL unsigned long
 meta_window_get_net_wm_desktop (MetaWindow *window)
 {
   if (window->on_all_workspaces)
@@ -5848,7 +5848,7 @@
   meta_error_trap_pop (window->display);
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_set_current_workspace_hint (MetaWindow *window)
 {
   /* FIXME if on more than one workspace, we claim to be "sticky",
@@ -5964,7 +5964,7 @@
   meta_stack_lower (window->screen->stack, window);
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_send_icccm_message (MetaWindow *window,
                                 Atom        atom,
                                 guint32     timestamp)
@@ -6000,7 +6000,7 @@
     meta_error_trap_pop (window->display);
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_move_resize_request (MetaWindow *window,
                                  guint       value_mask,
                                  int         gravity,
@@ -6165,7 +6165,7 @@
   save_user_window_placement (window);
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_window_configure_request (MetaWindow *window,
                                XEvent     *event)
 {
@@ -6249,7 +6249,7 @@
   return TRUE;
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_window_property_notify (MetaWindow *window,
                              XEvent     *event)
 {
@@ -6311,7 +6311,7 @@
 #define _NET_WM_MOVERESIZE_MOVE_KEYBOARD    10
 #define _NET_WM_MOVERESIZE_CANCEL           11
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_window_client_message (MetaWindow *window,
                             XEvent     *event)
 {
@@ -6812,7 +6812,7 @@
  * @window's ancestors will have its %attached_focus_window field
  * cleared if it is currently %focus_window.
  */
-void
+LOCAL_SYMBOL void
 meta_window_propagate_focus_appearance (MetaWindow *window,
                                         gboolean    focused)
 {
@@ -6852,7 +6852,7 @@
     }
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_window_notify_focus (MetaWindow *window,
                           XEvent     *event)
 {
@@ -7289,7 +7289,7 @@
                 window->sm_client_id ? window->sm_client_id : "none");
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_update_role (MetaWindow *window)
 {
   char *str;
@@ -7312,7 +7312,7 @@
                 window->desc, window->role ? window->role : "null");
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_update_net_wm_type (MetaWindow *window)
 {
   int n_atoms;
@@ -7391,7 +7391,7 @@
     meta_ui_queue_frame_draw (window->screen->ui, window->frame->xwindow);
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_update_icon_now (MetaWindow *window)
 {
   GdkPixbuf *icon;
@@ -7474,7 +7474,7 @@
   return FALSE;
 }
 
-GList*
+LOCAL_SYMBOL GList*
 meta_window_get_workspaces (MetaWindow *window)
 {
   if (window->on_all_workspaces)
@@ -7673,7 +7673,7 @@
     }
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_recalc_window_type (MetaWindow *window)
 {
   recalc_window_type (window);
@@ -7893,7 +7893,7 @@
 #undef MAX_N_ACTIONS
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_recalc_features (MetaWindow *window)
 {
   recalc_window_features (window);
@@ -8273,7 +8273,7 @@
   meta_ui_window_menu_free (menu);
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_show_menu (MetaWindow *window,
                        int         root_x,
                        int         root_y,
@@ -8408,7 +8408,7 @@
   meta_ui_window_menu_popup (menu, root_x, root_y, button, timestamp);
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_shove_titlebar_onscreen (MetaWindow *window)
 {
   MetaRectangle  outer_rect;
@@ -8456,7 +8456,7 @@
                            window->rect.height);
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_window_titlebar_is_onscreen (MetaWindow *window)
 {
   MetaRectangle  titlebar_rect;
@@ -9270,7 +9270,7 @@
     }
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_handle_mouse_grab_op_event (MetaWindow *window,
                                         XEvent     *event)
 {
@@ -9405,7 +9405,7 @@
     }
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_set_gravity (MetaWindow *window,
                          int         gravity)
 {
@@ -9456,7 +9456,7 @@
               area->x, area->y, area->width, area->height);
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_get_work_area_current_monitor (MetaWindow    *window,
                                            MetaRectangle *area)
 {
@@ -9469,7 +9469,7 @@
                                          area);
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_get_work_area_for_monitor (MetaWindow    *window,
                                        int            which_monitor,
                                        MetaRectangle *area)
@@ -9481,7 +9481,7 @@
                          which_monitor);
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_get_work_area_all_monitors (MetaWindow    *window,
                                         MetaRectangle *area)
 {
@@ -9507,7 +9507,7 @@
               window->desc, area->x, area->y, area->width, area->height);
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_get_current_tile_area (MetaWindow    *window,
                                    MetaRectangle *tile_area)
 {
@@ -9532,7 +9532,7 @@
     tile_area->x += tile_area->width;
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_window_same_application (MetaWindow *window,
                               MetaWindow *other_window)
 {
@@ -9562,7 +9562,7 @@
           (other_window->xwindow & ~resource_mask));
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_refresh_resize_popup (MetaWindow *window)
 {
   if (window->display->grab_op == META_GRAB_OP_NONE)
@@ -9848,7 +9848,7 @@
   return TRUE;
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_begin_grab_op (MetaWindow *window,
                            MetaGrabOp  op,
                            gboolean    frame_action,
@@ -9871,7 +9871,7 @@
                               x, y);
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_update_keyboard_resize (MetaWindow *window,
                                     gboolean    update_cursor)
 {
@@ -9895,7 +9895,7 @@
     }
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_update_keyboard_move (MetaWindow *window)
 {
   int x, y;
@@ -9905,7 +9905,7 @@
                      &x, &y);
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_update_layer (MetaWindow *window)
 {
   MetaGroup *group;
@@ -9962,7 +9962,7 @@
     }
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_stack_just_below (MetaWindow *window,
                               MetaWindow *below_this_one)
 {
@@ -10006,7 +10006,7 @@
   return window->net_wm_user_time;
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_set_user_time (MetaWindow *window,
                            guint32     timestamp)
 {
@@ -10762,7 +10762,7 @@
   return window->tile_match;
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_compute_tile_match (MetaWindow *window)
 {
   MetaWindow *match;
--- a/src/core/workspace.c
+++ b/src/core/workspace.c
@@ -157,7 +157,7 @@
     *mru_list = g_list_prepend (*mru_list, window);
 }
 
-MetaWorkspace*
+LOCAL_SYMBOL MetaWorkspace*
 meta_workspace_new (MetaScreen *screen)
 {
   MetaWorkspace *workspace;
@@ -231,7 +231,7 @@
   workspace->builtin_struts = NULL;
 }
 
-void
+LOCAL_SYMBOL void
 meta_workspace_remove (MetaWorkspace *workspace)
 {
   GList *tmp;
@@ -297,7 +297,7 @@
    */
 }
 
-void
+LOCAL_SYMBOL void
 meta_workspace_add_window (MetaWorkspace *workspace,
                            MetaWindow    *window)
 {
@@ -350,7 +350,7 @@
   g_object_notify (G_OBJECT (workspace), "n-windows");
 }
 
-void
+LOCAL_SYMBOL void
 meta_workspace_remove_window (MetaWorkspace *workspace,
                               MetaWindow    *window)
 {
@@ -399,7 +399,7 @@
   g_object_notify (G_OBJECT (workspace), "n-windows");
 }
 
-void
+LOCAL_SYMBOL void
 meta_workspace_relocate_windows (MetaWorkspace *workspace,
                                  MetaWorkspace *new_home)
 {
@@ -427,7 +427,7 @@
   g_assert (workspace->windows == NULL);
 }
 
-void
+LOCAL_SYMBOL void
 meta_workspace_queue_calc_showing  (MetaWorkspace *workspace)
 {
   GList *tmp;
@@ -750,7 +750,7 @@
   return workspace_windows;
 }
 
-void
+LOCAL_SYMBOL void
 meta_workspace_invalidate_work_area (MetaWorkspace *workspace)
 {
   GList *tmp;
@@ -1053,7 +1053,7 @@
   meta_workspace_invalidate_work_area (workspace);
 }
 
-void
+LOCAL_SYMBOL void
 meta_workspace_get_work_area_for_monitor (MetaWorkspace *workspace,
                                           int            which_monitor,
                                           MetaRectangle *area)
@@ -1075,7 +1075,7 @@
   *area = workspace->work_area_screen;
 }
 
-GList*
+LOCAL_SYMBOL GList*
 meta_workspace_get_onscreen_region (MetaWorkspace *workspace)
 {
   ensure_work_areas_validated (workspace);
@@ -1083,7 +1083,7 @@
   return workspace->screen_region;
 }
 
-GList*
+LOCAL_SYMBOL GList*
 meta_workspace_get_onmonitor_region (MetaWorkspace *workspace,
                                      int            which_monitor)
 {
@@ -1190,13 +1190,13 @@
   return meta_screen_get_workspace_by_index (workspace->screen, i);
 }
 
-const char*
+LOCAL_SYMBOL const char*
 meta_workspace_get_name (MetaWorkspace *workspace)
 {
   return meta_prefs_get_workspace_name (meta_workspace_index (workspace));
 }
 
-void
+LOCAL_SYMBOL void
 meta_workspace_focus_default_window (MetaWorkspace *workspace,
                                      MetaWindow    *not_this_one,
                                      guint32        timestamp)
--- a/src/core/xprops.c
+++ b/src/core/xprops.c
@@ -233,7 +233,7 @@
   return TRUE;
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_prop_get_atom_list (MetaDisplay *display,
                          Window       xwindow,
                          Atom         xatom,
@@ -277,7 +277,7 @@
   return TRUE;
 }
 
-gboolean
+LOCAL_SYMBOL LOCAL_SYMBOL gboolean
 meta_prop_get_cardinal_list (MetaDisplay *display,
                              Window       xwindow,
                              Atom         xatom,
@@ -343,7 +343,7 @@
   return TRUE;
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_prop_get_motif_hints (MetaDisplay   *display,
                            Window         xwindow,
                            Atom           xatom,
@@ -375,7 +375,7 @@
   return TRUE;
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_prop_get_latin1_string (MetaDisplay *display,
                              Window       xwindow,
                              Atom         xatom,
@@ -423,7 +423,7 @@
   return TRUE;
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_prop_get_utf8_string (MetaDisplay *display,
                            Window       xwindow,
                            Atom         xatom,
@@ -517,7 +517,7 @@
 }
 
 /* returns g_malloc not Xmalloc memory */
-gboolean
+LOCAL_SYMBOL gboolean
 meta_prop_get_utf8_list (MetaDisplay   *display,
                          Window         xwindow,
                          Atom           xatom,
@@ -536,7 +536,7 @@
   return utf8_list_from_results (&results, str_p, n_str_p);
 }
 
-void
+LOCAL_SYMBOL void
 meta_prop_set_utf8_string_hint (MetaDisplay *display,
                                 Window xwindow,
                                 Atom atom,
@@ -582,7 +582,7 @@
 }
 #endif
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_prop_get_window (MetaDisplay *display,
                       Window       xwindow,
                       Atom         xatom,
@@ -599,7 +599,7 @@
   return window_from_results (&results, window_p);
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_prop_get_cardinal (MetaDisplay   *display,
                         Window         xwindow,
                         Atom           xatom,
@@ -628,7 +628,7 @@
   return TRUE;
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_prop_get_cardinal_with_atom_type (MetaDisplay   *display,
                                        Window         xwindow,
                                        Atom           xatom,
@@ -669,7 +669,7 @@
   return *utf8_str_p != NULL;
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_prop_get_text_property (MetaDisplay   *display,
                              Window         xwindow,
                              Atom           xatom,
@@ -762,7 +762,7 @@
   return TRUE;
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_prop_get_wm_hints (MetaDisplay   *display,
                         Window         xwindow,
                         Atom           xatom,
@@ -823,7 +823,7 @@
   return TRUE;
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_prop_get_class_hint (MetaDisplay   *display,
                           Window         xwindow,
                           Atom           xatom,
@@ -898,7 +898,7 @@
   return TRUE;
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_prop_get_size_hints (MetaDisplay   *display,
                           Window         xwindow,
                           Atom           xatom,
@@ -947,7 +947,7 @@
   return g_string_free (str, FALSE);
 }
 
-void
+LOCAL_SYMBOL void
 meta_prop_get_values (MetaDisplay   *display,
                       Window         xwindow,
                       MetaPropValue *values,
@@ -1234,7 +1234,7 @@
     }
 }
 
-void
+LOCAL_SYMBOL void
 meta_prop_free_values (MetaPropValue *values,
                        int            n_values)
 {
--- a/src/ui/draw-workspace.c
+++ b/src/ui/draw-workspace.c
@@ -25,6 +25,10 @@
  * 02110-1335, USA.
  */
 
+#if HAVE_CONFIG_H
+#include <config.h>
+#endif
+
 #include "draw-workspace.h"
 #include "theme-private.h"
 
@@ -153,7 +157,7 @@
   cairo_restore (cr);
 }
 
-void
+LOCAL_SYMBOL void
 wnck_draw_workspace (GtkWidget                   *widget,
                      cairo_t                     *cr,
                      int                          x,
--- a/src/ui/frames.c
+++ b/src/ui/frames.c
@@ -635,7 +635,7 @@
                             fgeom);
 }
 
-MetaFrames*
+LOCAL_SYMBOL MetaFrames*
 meta_frames_new (int screen_number)
 {
   GdkScreen *screen;
@@ -677,7 +677,7 @@
                                                                 variant));
 }
 
-void
+LOCAL_SYMBOL void
 meta_frames_manage_window (MetaFrames *frames,
                            Window      xwindow,
                            GdkWindow  *window)
@@ -715,7 +715,7 @@
   g_hash_table_replace (frames->frames, &frame->xwindow, frame);
 }
 
-void
+LOCAL_SYMBOL void
 meta_frames_unmanage_window (MetaFrames *frames,
                              Window      xwindow)
 {
@@ -785,7 +785,7 @@
   return frame;
 }
 
-void
+LOCAL_SYMBOL void
 meta_frames_get_borders (MetaFrames *frames,
                          Window xwindow,
                          MetaFrameBorders *borders)
@@ -820,7 +820,7 @@
                                 borders);
 }
 
-void
+LOCAL_SYMBOL void
 meta_frames_get_corner_radiuses (MetaFrames *frames,
                                  Window      xwindow,
                                  float      *top_left,
@@ -854,7 +854,7 @@
     *bottom_right = fgeom.bottom_right_corner_rounded_radius + sqrt(fgeom.bottom_right_corner_rounded_radius);
 }
 
-void
+LOCAL_SYMBOL void
 meta_frames_reset_bg (MetaFrames *frames,
                       Window  xwindow)
 {
@@ -876,7 +876,7 @@
                            CWBackPixmap, &attrs);
 }
 
-void
+LOCAL_SYMBOL void
 meta_frames_unflicker_bg (MetaFrames *frames,
                           Window      xwindow,
                           int         target_width,
@@ -1015,7 +1015,7 @@
   return visible_region;
 }
 
-cairo_region_t *
+LOCAL_SYMBOL cairo_region_t *
 meta_frames_get_frame_bounds (MetaFrames *frames,
                               Window      xwindow,
                               int         window_width,
@@ -1034,7 +1034,7 @@
                              window_width, window_height);
 }
 
-void
+LOCAL_SYMBOL void
 meta_frames_move_resize_frame (MetaFrames *frames,
                                Window      xwindow,
                                int         x,
@@ -1054,7 +1054,7 @@
     invalidate_whole_window (frames, frame);
 }
 
-void
+LOCAL_SYMBOL void
 meta_frames_queue_draw (MetaFrames *frames,
                         Window      xwindow)
 {
@@ -1065,7 +1065,7 @@
   invalidate_whole_window (frames, frame);
 }
 
-void
+LOCAL_SYMBOL void
 meta_frames_set_title (MetaFrames *frames,
                        Window      xwindow,
                        const char *title)
@@ -1088,7 +1088,7 @@
   invalidate_whole_window (frames, frame);
 }
 
-void
+LOCAL_SYMBOL void
 meta_frames_update_frame_style (MetaFrames *frames,
                                 Window      xwindow)
 {
@@ -1102,7 +1102,7 @@
   invalidate_whole_window (frames, frame);
 }
 
-void
+LOCAL_SYMBOL void
 meta_frames_repaint_frame (MetaFrames *frames,
                            Window      xwindow)
 {
@@ -1509,7 +1509,7 @@
   return TRUE;
 }
 
-void
+LOCAL_SYMBOL void
 meta_frames_notify_menu_hide (MetaFrames *frames)
 {
   Display *display = GDK_DISPLAY_XDISPLAY (gdk_display_get_default ());
@@ -2628,7 +2628,7 @@
     return META_FRAME_CONTROL_TITLE;
 }
 
-void
+LOCAL_SYMBOL void
 meta_frames_push_delay_exposes (MetaFrames *frames)
 {
   if (frames->expose_delay_count == 0)
@@ -2657,7 +2657,7 @@
     }
 }
 
-void
+LOCAL_SYMBOL void
 meta_frames_pop_delay_exposes  (MetaFrames *frames)
 {
   g_return_if_fail (frames->expose_delay_count > 0);
--- a/src/ui/menu.c
+++ b/src/ui/menu.c
@@ -320,7 +320,7 @@
   return mi;
 }
 
-MetaWindowMenu*
+LOCAL_SYMBOL MetaWindowMenu*
 meta_window_menu_new   (MetaFrames         *frames,
                         MetaMenuOp          ops,
                         MetaMenuOp          insensitive,
@@ -496,7 +496,7 @@
   return menu;
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_menu_popup (MetaWindowMenu     *menu,
                         int                 root_x,
                         int                 root_y,
@@ -525,7 +525,7 @@
     meta_warning ("GtkMenu failed to grab the pointer\n");
 }
 
-void
+LOCAL_SYMBOL void
 meta_window_menu_free (MetaWindowMenu *menu)
 {
   gtk_widget_destroy (menu->menu);
--- a/src/ui/metaaccellabel.c
+++ b/src/ui/metaaccellabel.c
@@ -144,7 +144,7 @@
   meta_accel_label_update (accel_label);
 }
 
-GtkWidget*
+LOCAL_SYMBOL GtkWidget*
 meta_accel_label_new_with_mnemonic (const gchar *string)
 {
   MetaAccelLabel *accel_label;
@@ -183,7 +183,7 @@
   G_OBJECT_CLASS (meta_accel_label_parent_class)->finalize (object);
 }
 
-void
+LOCAL_SYMBOL void
 meta_accel_label_set_accelerator (MetaAccelLabel         *accel_label,
                                   guint                   accelerator_key,
                                   MetaVirtualModifier     accelerator_mods)
--- a/src/ui/resizepopup.c
+++ b/src/ui/resizepopup.c
@@ -42,7 +42,7 @@
   MetaRectangle rect;
 };
 
-MetaResizePopup*
+LOCAL_SYMBOL MetaResizePopup*
 meta_ui_resize_popup_new (Display *display,
                           int      screen_number)
 {
@@ -56,7 +56,7 @@
   return popup;
 }
 
-void
+LOCAL_SYMBOL void
 meta_ui_resize_popup_free (MetaResizePopup *popup)
 {
   g_return_if_fail (popup != NULL);
@@ -155,7 +155,7 @@
     }
 }
 
-void
+LOCAL_SYMBOL void
 meta_ui_resize_popup_set (MetaResizePopup *popup,
                           MetaRectangle    rect,
                           int              base_width,
@@ -196,7 +196,7 @@
   sync_showing (popup);
 }
 
-void
+LOCAL_SYMBOL void
 meta_ui_resize_popup_set_showing  (MetaResizePopup *popup,
                                    gboolean         showing)
 {
--- a/src/ui/tabpopup.c
+++ b/src/ui/tabpopup.c
@@ -209,7 +209,7 @@
   return te;
 }
 
-MetaTabPopup*
+LOCAL_SYMBOL MetaTabPopup*
 meta_ui_tab_popup_new (const MetaTabEntry *entries,
                        int                 screen_number,
                        int                 entry_count,
@@ -403,7 +403,7 @@
   g_free (te);
 }
 
-void
+LOCAL_SYMBOL void
 meta_ui_tab_popup_free (MetaTabPopup *popup)
 {
   meta_verbose ("Destroying tab popup window\n");
@@ -424,7 +424,7 @@
   g_free (popup);
 }
 
-void
+LOCAL_SYMBOL void
 meta_ui_tab_popup_set_showing (MetaTabPopup *popup,
                                gboolean      showing)
 {
@@ -516,7 +516,7 @@
   popup->current_selected_entry = te;
 }
 
-void
+LOCAL_SYMBOL void
 meta_ui_tab_popup_forward (MetaTabPopup *popup)
 {
   if (popup->current != NULL)
@@ -535,7 +535,7 @@
     }
 }
 
-void
+LOCAL_SYMBOL void
 meta_ui_tab_popup_backward (MetaTabPopup *popup)
 {
   if (popup->current != NULL)
@@ -554,7 +554,7 @@
     }
 }
 
-MetaTabEntryKey
+LOCAL_SYMBOL MetaTabEntryKey
 meta_ui_tab_popup_get_selected (MetaTabPopup *popup)
 {
   if (popup->current)
@@ -569,7 +569,7 @@
     return (MetaTabEntryKey)None;
 }
 
-void
+LOCAL_SYMBOL void
 meta_ui_tab_popup_select (MetaTabPopup *popup,
                           MetaTabEntryKey key)
 {
--- a/src/ui/theme.c
+++ b/src/ui/theme.c
@@ -207,7 +207,7 @@
  *
  * Returns: The newly created MetaFrameLayout.
  */
-MetaFrameLayout*
+LOCAL_SYMBOL MetaFrameLayout*
 meta_frame_layout_new  (void)
 {
   MetaFrameLayout *layout;
@@ -311,7 +311,7 @@
     return TRUE;
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_frame_layout_validate (const MetaFrameLayout *layout,
                             GError               **error)
 {
@@ -361,7 +361,7 @@
   return TRUE;
 }
 
-MetaFrameLayout*
+LOCAL_SYMBOL MetaFrameLayout*
 meta_frame_layout_copy (const MetaFrameLayout *src)
 {
   MetaFrameLayout *layout;
@@ -375,7 +375,7 @@
   return layout;
 }
 
-void
+LOCAL_SYMBOL void
 meta_frame_layout_ref (MetaFrameLayout *layout)
 {
   g_return_if_fail (layout != NULL);
@@ -383,7 +383,7 @@
   layout->refcount += 1;
 }
 
-void
+LOCAL_SYMBOL void
 meta_frame_layout_unref (MetaFrameLayout *layout)
 {
   g_return_if_fail (layout != NULL);
@@ -398,7 +398,7 @@
     }
 }
 
-void
+LOCAL_SYMBOL void
 meta_frame_layout_get_borders (const MetaFrameLayout *layout,
                                int                    text_height,
                                MetaFrameFlags         flags,
@@ -612,7 +612,7 @@
   return FALSE; /* did not strip anything */
 }
 
-void
+LOCAL_SYMBOL void
 meta_frame_layout_calc_geometry (const MetaFrameLayout  *layout,
                                  int                     text_height,
                                  MetaFrameFlags          flags,
@@ -986,7 +986,7 @@
  * meta_gradient_spec_new: (skip)
  *
  */
-MetaGradientSpec*
+LOCAL_SYMBOL MetaGradientSpec*
 meta_gradient_spec_new (MetaGradientType type)
 {
   MetaGradientSpec *spec;
@@ -1005,7 +1005,7 @@
   meta_color_spec_free (spec);
 }
 
-void
+LOCAL_SYMBOL void
 meta_gradient_spec_free (MetaGradientSpec *spec)
 {
   g_return_if_fail (spec != NULL);
@@ -1017,7 +1017,7 @@
   g_free (spec);
 }
 
-GdkPixbuf*
+LOCAL_SYMBOL GdkPixbuf*
 meta_gradient_spec_render (const MetaGradientSpec *spec,
                            GtkStyleContext        *style,
                            int                     width,
@@ -1055,7 +1055,7 @@
   return pixbuf;
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_gradient_spec_validate (MetaGradientSpec *spec,
                              GError          **error)
 {
@@ -1076,7 +1076,7 @@
  * meta_alpha_gradient_spec_new: (skip)
  *
  */
-MetaAlphaGradientSpec*
+LOCAL_SYMBOL LOCAL_SYMBOL MetaAlphaGradientSpec*
 meta_alpha_gradient_spec_new (MetaGradientType       type,
                               int                    n_alphas)
 {
@@ -1093,7 +1093,7 @@
   return spec;
 }
 
-void
+LOCAL_SYMBOL void
 meta_alpha_gradient_spec_free (MetaAlphaGradientSpec *spec)
 {
   g_return_if_fail (spec != NULL);
@@ -1106,7 +1106,7 @@
  * meta_color_spec_new: (skip)
  *
  */
-MetaColorSpec*
+LOCAL_SYMBOL MetaColorSpec*
 meta_color_spec_new (MetaColorSpecType type)
 {
   MetaColorSpec *spec;
@@ -1145,7 +1145,7 @@
   return spec;
 }
 
-void
+LOCAL_SYMBOL void
 meta_color_spec_free (MetaColorSpec *spec)
 {
   g_return_if_fail (spec != NULL);
@@ -1190,7 +1190,7 @@
  * meta_color_spec_new_from_string: (skip)
  *
  */
-MetaColorSpec*
+LOCAL_SYMBOL MetaColorSpec*
 meta_color_spec_new_from_string (const char *str,
                                  GError    **err)
 {
@@ -1493,7 +1493,7 @@
  * meta_color_spec_new_gtk: (skip)
  *
  */
-MetaColorSpec*
+LOCAL_SYMBOL LOCAL_SYMBOL MetaColorSpec*
 meta_color_spec_new_gtk (MetaGtkColorComponent component,
                          GtkStateFlags         state)
 {
@@ -1510,7 +1510,7 @@
 /* Based on set_color() in gtkstyle.c */
 #define LIGHTNESS_MULT 1.3
 #define DARKNESS_MULT  0.7
-void
+LOCAL_SYMBOL void
 meta_gtk_style_get_light_color (GtkStyleContext *style,
                                 GtkStateFlags    state,
                                 GdkRGBA         *color)
@@ -1519,7 +1519,7 @@
   gtk_style_shade (color, color, LIGHTNESS_MULT);
 }
 
-void
+LOCAL_SYMBOL void
 meta_gtk_style_get_dark_color (GtkStyleContext *style,
                                GtkStateFlags    state,
                                GdkRGBA         *color)
@@ -1584,7 +1584,7 @@
     meta_color_spec_render (fallback, context, color);
 }
 
-void
+LOCAL_SYMBOL void
 meta_color_spec_render (MetaColorSpec   *spec,
                         GtkStyleContext *context,
                         GdkRGBA         *color)
@@ -2690,7 +2690,7 @@
  * meta_parse_position_expression: (skip)
  *
  */
-gboolean
+LOCAL_SYMBOL gboolean
 meta_parse_position_expression (MetaDrawSpec              *spec,
                                 const MetaPositionExprEnv *env,
                                 int                       *x_return,
@@ -2731,7 +2731,7 @@
  * meta_parse_size_expression: (skip)
  *
  */
-gboolean
+LOCAL_SYMBOL gboolean
 meta_parse_size_expression (MetaDrawSpec              *spec,
                             const MetaPositionExprEnv *env,
                             int                       *val_return,
@@ -2764,7 +2764,7 @@
  * lookups to eval them. Obviously it's a tradeoff that
  * slows down theme load times.
  */
-gboolean
+LOCAL_SYMBOL gboolean
 meta_theme_replace_constants (MetaTheme   *theme,
                               PosToken    *tokens,
                               int          n_tokens,
@@ -2869,7 +2869,7 @@
   return retval;
 }
 
-void
+LOCAL_SYMBOL void
 meta_draw_spec_free (MetaDrawSpec *spec)
 {
   if (!spec) return;
@@ -2881,7 +2881,7 @@
  * meta_draw_spec_new: (skip)
  *
  */
-MetaDrawSpec *
+LOCAL_SYMBOL MetaDrawSpec *
 meta_draw_spec_new (MetaTheme  *theme,
                     const char *expr,
                     GError    **error)
@@ -2913,7 +2913,7 @@
  * meta_draw_op_new: (skip)
  *
  */
-MetaDrawOp*
+LOCAL_SYMBOL MetaDrawOp*
 meta_draw_op_new (MetaDrawType type)
 {
   MetaDrawOp *op;
@@ -2986,7 +2986,7 @@
   return op;
 }
 
-void
+LOCAL_SYMBOL void
 meta_draw_op_free (MetaDrawOp *op)
 {
   g_return_if_fail (op != NULL);
@@ -4100,7 +4100,7 @@
   gtk_style_context_restore (style_gtk);
 }
 
-void
+LOCAL_SYMBOL void
 meta_draw_op_draw_with_style (const MetaDrawOp    *op,
                               GtkStyleContext     *style_gtk,
                               GtkWidget           *widget,
@@ -4118,7 +4118,7 @@
 
 }
 
-void
+LOCAL_SYMBOL void
 meta_draw_op_draw (const MetaDrawOp    *op,
                    GtkWidget           *widget,
                    cairo_t             *cr,
@@ -4133,7 +4133,7 @@
  * meta_draw_op_list_new: (skip)
  *
  */
-MetaDrawOpList*
+LOCAL_SYMBOL MetaDrawOpList*
 meta_draw_op_list_new (int n_preallocs)
 {
   MetaDrawOpList *op_list;
@@ -4150,7 +4150,7 @@
   return op_list;
 }
 
-void
+LOCAL_SYMBOL void
 meta_draw_op_list_ref (MetaDrawOpList *op_list)
 {
   g_return_if_fail (op_list != NULL);
@@ -4158,7 +4158,7 @@
   op_list->refcount += 1;
 }
 
-void
+LOCAL_SYMBOL void
 meta_draw_op_list_unref (MetaDrawOpList *op_list)
 {
   g_return_if_fail (op_list != NULL);
@@ -4180,7 +4180,7 @@
     }
 }
 
-void
+LOCAL_SYMBOL void
 meta_draw_op_list_draw_with_style  (const MetaDrawOpList *op_list,
                                     GtkStyleContext      *style_gtk,
                                     GtkWidget            *widget,
@@ -4239,7 +4239,7 @@
   cairo_restore (cr);
 }
 
-void
+LOCAL_SYMBOL void
 meta_draw_op_list_draw  (const MetaDrawOpList *op_list,
                          GtkWidget            *widget,
                          cairo_t              *cr,
@@ -4251,7 +4251,7 @@
                                      cr, info, rect);
 }
 
-void
+LOCAL_SYMBOL void
 meta_draw_op_list_append (MetaDrawOpList       *op_list,
                           MetaDrawOp           *op)
 {
@@ -4265,7 +4265,7 @@
   op_list->n_ops += 1;
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_draw_op_list_validate (MetaDrawOpList    *op_list,
                             GError           **error)
 {
@@ -4280,7 +4280,7 @@
  * of the list to report the error. It might be nice to
  * store names inside the list sometime.
  */
-gboolean
+LOCAL_SYMBOL gboolean
 meta_draw_op_list_contains (MetaDrawOpList    *op_list,
                             MetaDrawOpList    *child)
 {
@@ -4322,7 +4322,7 @@
  *
  * \return The newly-constructed style.
  */
-MetaFrameStyle*
+LOCAL_SYMBOL MetaFrameStyle*
 meta_frame_style_new (MetaFrameStyle *parent)
 {
   MetaFrameStyle *style;
@@ -4347,7 +4347,7 @@
  *
  * \param style  The style.
  */
-void
+LOCAL_SYMBOL void
 meta_frame_style_ref (MetaFrameStyle *style)
 {
   g_return_if_fail (style != NULL);
@@ -4366,7 +4366,7 @@
         meta_draw_op_list_unref (op_lists[i][j]);
 }
 
-void
+LOCAL_SYMBOL void
 meta_frame_style_unref (MetaFrameStyle *style)
 {
   g_return_if_fail (style != NULL);
@@ -4508,7 +4508,7 @@
   return op_list;
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_frame_style_validate (MetaFrameStyle    *style,
                            guint              current_theme_version,
                            GError           **error)
@@ -4629,7 +4629,7 @@
     }
 }
 
-void
+LOCAL_SYMBOL LOCAL_SYMBOL void
 meta_frame_style_draw_with_style (MetaFrameStyle          *style,
                                   GtkStyleContext         *style_gtk,
                                   GtkWidget               *widget,
@@ -4872,7 +4872,7 @@
     }
 }
 
-void
+LOCAL_SYMBOL void
 meta_frame_style_draw (MetaFrameStyle          *style,
                        GtkWidget               *widget,
                        cairo_t                 *cr,
@@ -4891,7 +4891,7 @@
                                     button_states, mini_icon, icon);
 }
 
-MetaFrameStyleSet*
+LOCAL_SYMBOL MetaFrameStyleSet*
 meta_frame_style_set_new (MetaFrameStyleSet *parent)
 {
   MetaFrameStyleSet *style_set;
@@ -4917,7 +4917,7 @@
       meta_frame_style_unref (focus_styles[i]);
 }
 
-void
+LOCAL_SYMBOL void
 meta_frame_style_set_ref (MetaFrameStyleSet *style_set)
 {
   g_return_if_fail (style_set != NULL);
@@ -4925,7 +4925,7 @@
   style_set->refcount += 1;
 }
 
-void
+LOCAL_SYMBOL void
 meta_frame_style_set_unref (MetaFrameStyleSet *style_set)
 {
   g_return_if_fail (style_set != NULL);
@@ -5075,7 +5075,7 @@
   return TRUE;
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_frame_style_set_validate  (MetaFrameStyleSet *style_set,
                                 GError           **error)
 {
@@ -5324,7 +5324,7 @@
  * meta_theme_load_image: (skip)
  *
  */
-GdkPixbuf*
+LOCAL_SYMBOL GdkPixbuf*
 meta_theme_load_image (MetaTheme  *theme,
                        const char *filename,
                        guint size_of_theme_icons,
@@ -5464,7 +5464,7 @@
   return style;
 }
 
-MetaFrameStyle*
+LOCAL_SYMBOL MetaFrameStyle*
 meta_theme_get_frame_style (MetaTheme     *theme,
                             MetaFrameType  type,
                             MetaFrameFlags flags)
@@ -5478,7 +5478,7 @@
   return style;
 }
 
-double
+LOCAL_SYMBOL double
 meta_theme_get_title_scale (MetaTheme     *theme,
                             MetaFrameType  type,
                             MetaFrameFlags flags)
@@ -5496,7 +5496,7 @@
   return style->layout->title_scale;
 }
 
-void
+LOCAL_SYMBOL void
 meta_theme_draw_frame_with_style (MetaTheme              *theme,
                                   GtkStyleContext        *style_gtk,
                                   GtkWidget              *widget,
@@ -5592,7 +5592,7 @@
                                  borders);
 }
 
-void
+LOCAL_SYMBOL void
 meta_theme_calc_geometry (MetaTheme              *theme,
                           MetaFrameType           type,
                           int                     text_height,
@@ -5622,14 +5622,14 @@
                                    theme);
 }
 
-MetaFrameLayout*
+LOCAL_SYMBOL MetaFrameLayout*
 meta_theme_lookup_layout (MetaTheme         *theme,
                           const char        *name)
 {
   return g_hash_table_lookup (theme->layouts_by_name, name);
 }
 
-void
+LOCAL_SYMBOL void
 meta_theme_insert_layout (MetaTheme         *theme,
                           const char        *name,
                           MetaFrameLayout   *layout)
@@ -5638,14 +5638,14 @@
   g_hash_table_replace (theme->layouts_by_name, g_strdup (name), layout);
 }
 
-MetaDrawOpList*
+LOCAL_SYMBOL MetaDrawOpList*
 meta_theme_lookup_draw_op_list (MetaTheme         *theme,
                                 const char        *name)
 {
   return g_hash_table_lookup (theme->draw_op_lists_by_name, name);
 }
 
-void
+LOCAL_SYMBOL void
 meta_theme_insert_draw_op_list (MetaTheme         *theme,
                                 const char        *name,
                                 MetaDrawOpList    *op_list)
@@ -5654,14 +5654,14 @@
   g_hash_table_replace (theme->draw_op_lists_by_name, g_strdup (name), op_list);
 }
 
-MetaFrameStyle*
+LOCAL_SYMBOL MetaFrameStyle*
 meta_theme_lookup_style (MetaTheme         *theme,
                          const char        *name)
 {
   return g_hash_table_lookup (theme->styles_by_name, name);
 }
 
-void
+LOCAL_SYMBOL void
 meta_theme_insert_style (MetaTheme         *theme,
                          const char        *name,
                          MetaFrameStyle    *style)
@@ -5670,14 +5670,14 @@
   g_hash_table_replace (theme->styles_by_name, g_strdup (name), style);
 }
 
-MetaFrameStyleSet*
+LOCAL_SYMBOL MetaFrameStyleSet*
 meta_theme_lookup_style_set (MetaTheme         *theme,
                              const char        *name)
 {
   return g_hash_table_lookup (theme->style_sets_by_name, name);
 }
 
-void
+LOCAL_SYMBOL LOCAL_SYMBOL void
 meta_theme_insert_style_set    (MetaTheme         *theme,
                                 const char        *name,
                                 MetaFrameStyleSet *style_set)
@@ -5692,7 +5692,7 @@
   return g_ascii_isupper (*str);
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_theme_define_int_constant (MetaTheme   *theme,
                                 const char  *name,
                                 int          value,
@@ -5728,7 +5728,7 @@
   return TRUE;
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_theme_lookup_int_constant (MetaTheme   *theme,
                                 const char  *name,
                                 int         *value)
@@ -5752,7 +5752,7 @@
     }
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_theme_define_float_constant (MetaTheme   *theme,
                                   const char  *name,
                                   double       value,
@@ -5792,7 +5792,7 @@
   return TRUE;
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_theme_lookup_float_constant (MetaTheme   *theme,
                                   const char  *name,
                                   double      *value)
@@ -5817,7 +5817,7 @@
     }
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_theme_define_color_constant (MetaTheme   *theme,
                                   const char  *name,
                                   const char  *value,
@@ -5862,7 +5862,7 @@
  *               doesn't exist
  * \return  TRUE if it exists, FALSE otherwise
  */
-gboolean
+LOCAL_SYMBOL gboolean
 meta_theme_lookup_color_constant (MetaTheme   *theme,
                                   const char  *name,
                                   char       **value)
@@ -5888,7 +5888,7 @@
 }
 
 
-PangoFontDescription*
+LOCAL_SYMBOL PangoFontDescription*
 meta_gtk_widget_get_font_desc (GtkWidget *widget,
                                double     scale,
 			       const PangoFontDescription *override)
@@ -5936,7 +5936,7 @@
   return retval;
 }
 
-MetaGtkColorComponent
+LOCAL_SYMBOL MetaGtkColorComponent
 meta_color_component_from_string (const char *str)
 {
   if (strcmp ("fg", str) == 0)
@@ -5959,7 +5959,7 @@
     return META_GTK_COLOR_LAST;
 }
 
-const char*
+LOCAL_SYMBOL const char*
 meta_color_component_to_string (MetaGtkColorComponent component)
 {
   switch (component)
@@ -5987,7 +5987,7 @@
   return "<unknown>";
 }
 
-MetaButtonState
+LOCAL_SYMBOL MetaButtonState
 meta_button_state_from_string (const char *str)
 {
   if (strcmp ("normal", str) == 0)
@@ -6000,7 +6000,7 @@
     return META_BUTTON_STATE_LAST;
 }
 
-const char*
+LOCAL_SYMBOL const char*
 meta_button_state_to_string (MetaButtonState state)
 {
   switch (state)
@@ -6018,7 +6018,7 @@
   return "<unknown>";
 }
 
-MetaButtonType
+LOCAL_SYMBOL MetaButtonType
 meta_button_type_from_string (const char *str, MetaTheme *theme)
 {
   if (META_THEME_ALLOWS(theme, META_THEME_SHADE_STICK_ABOVE_BUTTONS))
@@ -6065,7 +6065,7 @@
     return META_BUTTON_TYPE_LAST;
 }
 
-const char*
+LOCAL_SYMBOL const char*
 meta_button_type_to_string (MetaButtonType type)
 {
   switch (type)
@@ -6113,7 +6113,7 @@
   return "<unknown>";
 }
 
-MetaFramePiece
+LOCAL_SYMBOL MetaFramePiece
 meta_frame_piece_from_string (const char *str)
 {
   if (strcmp ("entire_background", str) == 0)
@@ -6144,7 +6144,7 @@
     return META_FRAME_PIECE_LAST;
 }
 
-const char*
+LOCAL_SYMBOL const char*
 meta_frame_piece_to_string (MetaFramePiece piece)
 {
   switch (piece)
@@ -6180,7 +6180,7 @@
   return "<unknown>";
 }
 
-MetaFrameState
+LOCAL_SYMBOL MetaFrameState
 meta_frame_state_from_string (const char *str)
 {
   if (strcmp ("normal", str) == 0)
@@ -6203,7 +6203,7 @@
     return META_FRAME_STATE_LAST;
 }
 
-const char*
+LOCAL_SYMBOL const char*
 meta_frame_state_to_string (MetaFrameState state)
 {
   switch (state)
@@ -6231,7 +6231,7 @@
   return "<unknown>";
 }
 
-MetaFrameResize
+LOCAL_SYMBOL MetaFrameResize
 meta_frame_resize_from_string (const char *str)
 {
   if (strcmp ("none", str) == 0)
@@ -6246,7 +6246,7 @@
     return META_FRAME_RESIZE_LAST;
 }
 
-const char*
+LOCAL_SYMBOL const char*
 meta_frame_resize_to_string (MetaFrameResize resize)
 {
   switch (resize)
@@ -6266,7 +6266,7 @@
   return "<unknown>";
 }
 
-MetaFrameFocus
+LOCAL_SYMBOL MetaFrameFocus
 meta_frame_focus_from_string (const char *str)
 {
   if (strcmp ("no", str) == 0)
@@ -6277,7 +6277,7 @@
     return META_FRAME_FOCUS_LAST;
 }
 
-const char*
+LOCAL_SYMBOL const char*
 meta_frame_focus_to_string (MetaFrameFocus focus)
 {
   switch (focus)
@@ -6293,7 +6293,7 @@
   return "<unknown>";
 }
 
-MetaFrameType
+LOCAL_SYMBOL MetaFrameType
 meta_frame_type_from_string (const char *str)
 {
   if (strcmp ("normal", str) == 0)
@@ -6356,7 +6356,7 @@
   return "<unknown>";
 }
 
-MetaGradientType
+LOCAL_SYMBOL MetaGradientType
 meta_gradient_type_from_string (const char *str)
 {
   if (strcmp ("vertical", str) == 0)
@@ -6369,7 +6369,7 @@
     return META_GRADIENT_LAST;
 }
 
-const char*
+LOCAL_SYMBOL const char*
 meta_gradient_type_to_string (MetaGradientType type)
 {
   switch (type)
@@ -6387,7 +6387,7 @@
   return "<unknown>";
 }
 
-GtkStateFlags
+LOCAL_SYMBOL GtkStateFlags
 meta_gtk_state_from_string (const char *str)
 {
   if (g_ascii_strcasecmp ("normal", str) == 0)
@@ -6410,7 +6410,7 @@
     return -1; /* hack */
 }
 
-const char*
+LOCAL_SYMBOL const char*
 meta_gtk_state_to_string (GtkStateFlags state)
 {
   switch (state)
@@ -6436,7 +6436,7 @@
   return "<unknown>";
 }
 
-GtkShadowType
+LOCAL_SYMBOL GtkShadowType
 meta_gtk_shadow_from_string (const char *str)
 {
   if (strcmp ("none", str) == 0)
@@ -6453,7 +6453,7 @@
     return -1;
 }
 
-const char*
+LOCAL_SYMBOL const char*
 meta_gtk_shadow_to_string (GtkShadowType shadow)
 {
   switch (shadow)
@@ -6473,7 +6473,7 @@
   return "<unknown>";
 }
 
-GtkArrowType
+LOCAL_SYMBOL GtkArrowType
 meta_gtk_arrow_from_string (const char *str)
 {
   if (strcmp ("up", str) == 0)
@@ -6490,7 +6490,7 @@
     return -1;
 }
 
-const char*
+LOCAL_SYMBOL const char*
 meta_gtk_arrow_to_string (GtkArrowType arrow)
 {
   switch (arrow)
@@ -6517,7 +6517,7 @@
  * \param str  a string representing a fill_type
  * \result  the fill_type, or -1 if it represents no fill_type.
  */
-MetaImageFillType
+LOCAL_SYMBOL MetaImageFillType
 meta_image_fill_type_from_string (const char *str)
 {
   if (strcmp ("tile", str) == 0)
@@ -6535,7 +6535,7 @@
  * \param fill_type  the fill type
  * \result  a string representing that type
  */
-const char*
+LOCAL_SYMBOL const char*
 meta_image_fill_type_to_string (MetaImageFillType fill_type)
 {
   switch (fill_type)
@@ -6974,7 +6974,7 @@
  * \param type  the button type
  * \return  the number of the theme format
  */
-guint
+LOCAL_SYMBOL guint
 meta_theme_earliest_version_with_button (MetaButtonType type)
 {
   switch (type)
--- a/src/ui/tile-preview.c
+++ b/src/ui/tile-preview.c
@@ -71,7 +71,7 @@
   return FALSE;
 }
 
-MetaTilePreview *
+LOCAL_SYMBOL MetaTilePreview *
 meta_tile_preview_new (int      screen_number)
 {
   MetaTilePreview *preview;
@@ -135,7 +135,7 @@
   return preview;
 }
 
-void
+LOCAL_SYMBOL void
 meta_tile_preview_free (MetaTilePreview *preview)
 {
   gtk_widget_destroy (preview->preview_window);
@@ -146,7 +146,7 @@
   g_free (preview);
 }
 
-void
+LOCAL_SYMBOL void
 meta_tile_preview_show (MetaTilePreview *preview,
                         MetaRectangle   *tile_rect)
 {
@@ -179,13 +179,13 @@
                           preview->tile_rect.width, preview->tile_rect.height);
 }
 
-void
+LOCAL_SYMBOL void
 meta_tile_preview_hide (MetaTilePreview *preview)
 {
   gtk_widget_hide (preview->preview_window);
 }
 
-Window
+LOCAL_SYMBOL Window
 meta_tile_preview_get_xwindow (MetaTilePreview *preview,
                                gulong          *create_serial)
 {
--- a/src/ui/ui.c
+++ b/src/ui/ui.c
@@ -57,7 +57,7 @@
   guint32 button_click_time;
 };
 
-void
+LOCAL_SYMBOL void
 meta_ui_init (void)
 {
   /* As of 2.91.7, Gdk uses XI2 by default, which conflicts with the
@@ -76,7 +76,7 @@
   meta_stock_icons_init ();
 }
 
-Display*
+LOCAL_SYMBOL Display*
 meta_ui_get_display (void)
 {
   return GDK_DISPLAY_XDISPLAY (gdk_display_get_default ());
@@ -242,7 +242,7 @@
     return GDK_FILTER_CONTINUE;
 }
 
-void
+LOCAL_SYMBOL void
 meta_ui_add_event_func (Display       *xdisplay,
                         MetaEventFunc  func,
                         gpointer       data)
@@ -257,7 +257,7 @@
 }
 
 /* removal is by data due to proxy function */
-void
+LOCAL_SYMBOL void
 meta_ui_remove_event_func (Display       *xdisplay,
                            MetaEventFunc  func,
                            gpointer       data)
@@ -270,7 +270,7 @@
   ef = NULL;
 }
 
-MetaUI*
+LOCAL_SYMBOL MetaUI*
 meta_ui_new (Display *xdisplay,
              Screen  *screen)
 {
@@ -295,7 +295,7 @@
   return ui;
 }
 
-void
+LOCAL_SYMBOL void
 meta_ui_free (MetaUI *ui)
 {
   GdkDisplay *gdisplay;
@@ -308,7 +308,7 @@
   g_free (ui);
 }
 
-void
+LOCAL_SYMBOL void
 meta_ui_get_frame_borders (MetaUI *ui,
                            Window frame_xwindow,
                            MetaFrameBorders *borders)
@@ -317,7 +317,7 @@
                            borders);
 }
 
-void
+LOCAL_SYMBOL void
 meta_ui_get_corner_radiuses (MetaUI *ui,
                              Window  xwindow,
                              float  *top_left,
@@ -330,7 +330,7 @@
                                    bottom_left, bottom_right);
 }
 
-Window
+LOCAL_SYMBOL Window
 meta_ui_create_frame_window (MetaUI *ui,
                              Display *xdisplay,
                              Visual *xvisual,
@@ -402,14 +402,14 @@
   return GDK_WINDOW_XID (window);
 }
 
-void
+LOCAL_SYMBOL void
 meta_ui_destroy_frame_window (MetaUI *ui,
 			      Window  xwindow)
 {
   meta_frames_unmanage_window (ui->frames, xwindow);
 }
 
-void
+LOCAL_SYMBOL void
 meta_ui_move_resize_frame (MetaUI *ui,
 			   Window frame,
 			   int x,
@@ -420,7 +420,7 @@
   meta_frames_move_resize_frame (ui->frames, frame, x, y, width, height);
 }
 
-void
+LOCAL_SYMBOL void
 meta_ui_map_frame   (MetaUI *ui,
                      Window  xwindow)
 {
@@ -434,7 +434,7 @@
     gdk_window_show_unraised (window);
 }
 
-void
+LOCAL_SYMBOL void
 meta_ui_unmap_frame (MetaUI *ui,
                      Window  xwindow)
 {
@@ -448,7 +448,7 @@
     gdk_window_hide (window);
 }
 
-void
+LOCAL_SYMBOL void
 meta_ui_unflicker_frame_bg (MetaUI *ui,
                             Window  xwindow,
                             int     target_width,
@@ -458,28 +458,28 @@
                             target_width, target_height);
 }
 
-void
+LOCAL_SYMBOL void
 meta_ui_update_frame_style (MetaUI  *ui,
                             Window   xwindow)
 {
   meta_frames_update_frame_style (ui->frames, xwindow);
 }
 
-void
+LOCAL_SYMBOL void
 meta_ui_repaint_frame (MetaUI *ui,
                        Window xwindow)
 {
   meta_frames_repaint_frame (ui->frames, xwindow);
 }
 
-void
+LOCAL_SYMBOL void
 meta_ui_reset_frame_bg (MetaUI *ui,
                         Window xwindow)
 {
   meta_frames_reset_bg (ui->frames, xwindow);
 }
 
-cairo_region_t *
+LOCAL_SYMBOL cairo_region_t *
 meta_ui_get_frame_bounds (MetaUI  *ui,
                           Window   xwindow,
                           int      window_width,
@@ -489,14 +489,14 @@
                                        window_width, window_height);
 }
 
-void
+LOCAL_SYMBOL void
 meta_ui_queue_frame_draw (MetaUI *ui,
                           Window xwindow)
 {
   meta_frames_queue_draw (ui->frames, xwindow);
 }
 
-void
+LOCAL_SYMBOL void
 meta_ui_set_frame_title (MetaUI     *ui,
                          Window      xwindow,
                          const char *title)
@@ -504,7 +504,7 @@
   meta_frames_set_title (ui->frames, xwindow, title);
 }
 
-MetaWindowMenu*
+LOCAL_SYMBOL MetaWindowMenu*
 meta_ui_window_menu_new  (MetaUI             *ui,
                           Window              client_xwindow,
                           MetaMenuOp          ops,
@@ -522,7 +522,7 @@
                                func, data);
 }
 
-void
+LOCAL_SYMBOL void
 meta_ui_window_menu_popup (MetaWindowMenu     *menu,
                            int                 root_x,
                            int                 root_y,
@@ -532,13 +532,13 @@
   meta_window_menu_popup (menu, root_x, root_y, button, timestamp);
 }
 
-void
+LOCAL_SYMBOL void
 meta_ui_window_menu_free (MetaWindowMenu *menu)
 {
   meta_window_menu_free (menu);
 }
 
-GdkPixbuf*
+LOCAL_SYMBOL GdkPixbuf*
 meta_gdk_pixbuf_get_from_pixmap (Pixmap       xpixmap,
                                  int          src_x,
                                  int          src_y,
@@ -588,19 +588,19 @@
   return retval;
 }
 
-void
+LOCAL_SYMBOL void
 meta_ui_push_delay_exposes (MetaUI *ui)
 {
   meta_frames_push_delay_exposes (ui->frames);
 }
 
-void
+LOCAL_SYMBOL void
 meta_ui_pop_delay_exposes  (MetaUI *ui)
 {
   meta_frames_pop_delay_exposes (ui->frames);
 }
 
-GdkPixbuf*
+LOCAL_SYMBOL GdkPixbuf*
 meta_ui_get_default_window_icon (MetaUI *ui)
 {
   static GdkPixbuf *default_icon = NULL;
@@ -635,7 +635,7 @@
   return default_icon;
 }
 
-GdkPixbuf*
+LOCAL_SYMBOL GdkPixbuf*
 meta_ui_get_default_mini_icon (MetaUI *ui)
 {
   static GdkPixbuf *default_icon = NULL;
@@ -670,7 +670,7 @@
   return default_icon;
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_ui_window_should_not_cause_focus (Display *xdisplay,
                                        Window   xwindow)
 {
@@ -689,7 +689,7 @@
     return FALSE;
 }
 
-char*
+LOCAL_SYMBOL char*
 meta_text_property_to_utf8 (Display             *xdisplay,
                             const XTextProperty *prop)
 {
@@ -721,7 +721,7 @@
   return retval;
 }
 
-void
+LOCAL_SYMBOL void
 meta_ui_theme_get_frame_borders (MetaUI *ui,
                                  MetaFrameType      type,
                                  MetaFrameFlags     flags,
@@ -758,7 +758,7 @@
     g_object_unref (style);
 }
 
-void
+LOCAL_SYMBOL void
 meta_ui_set_current_theme (const char *name,
                            gboolean    force_reload)
 {
@@ -766,7 +766,7 @@
   meta_invalidate_default_icons ();
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_ui_have_a_theme (void)
 {
   return meta_theme_get_current () != NULL;
@@ -824,7 +824,7 @@
   gtk_accelerator_parse (accel, keysym, keymask);
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_ui_parse_accelerator (const char          *accel,
                            unsigned int        *keysym,
                            unsigned int        *keycode,
@@ -879,7 +879,7 @@
 }
 
 /* Caller responsible for freeing return string of meta_ui_accelerator_name! */
-gchar*
+LOCAL_SYMBOL gchar*
 meta_ui_accelerator_name  (unsigned int        keysym,
                            MetaVirtualModifier mask)
 {
@@ -915,7 +915,7 @@
 
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_ui_parse_modifier (const char          *accel,
                         MetaVirtualModifier *mask)
 {
@@ -962,7 +962,7 @@
   return TRUE;
 }
 
-gboolean
+LOCAL_SYMBOL gboolean
 meta_ui_window_is_widget (MetaUI *ui,
                           Window  xwindow)
 {
@@ -1024,7 +1024,7 @@
   g_object_unref (G_OBJECT (factory));
 }
 
-int
+LOCAL_SYMBOL int
 meta_ui_get_drag_threshold (MetaUI *ui)
 {
   GtkSettings *settings;
@@ -1038,7 +1038,7 @@
   return threshold;
 }
 
-MetaUIDirection
+LOCAL_SYMBOL MetaUIDirection
 meta_ui_get_direction (void)
 {
   if (gtk_widget_get_default_direction() == GTK_TEXT_DIR_RTL)
